{
  "components": {
    "schemas": {
      "enrollmentsResponse": {
        "type": "object",
        "properties": {
          "enrollments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/enrollmentsResponse_enrollments"
            }
          }
        },
        "description": "A list of enrollments a participant has pending."
      },
      "eligiblePlansResponse": {
        "type": "object",
        "properties": {
          "eligiblePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_eligiblePlans"
            }
          }
        },
        "description": "A list eligible plans along with plan information."
      },
      "eligibleDependentsResponse": {
        "type": "object",
        "properties": {
          "eligibleDependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligibleDependentsResponse_eligibleDependents"
            }
          }
        },
        "description": "A list of eligible dependents."
      },
      "eligibleRelationships": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/eligibleRelationships_inner"
        }
      },
      "dependents": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/dependents_inner"
        }
      },
      "pendingElectionsResponse": {
        "type": "object",
        "properties": {
          "coverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_coverages"
            }
          },
          "footnotes": {
            "$ref": "#/components/schemas/footnotes"
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_dependents"
            }
          }
        },
        "description": "Provides the information for the Participant's Coverage."
      },
      "availableOptionsResponse": {
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_choices"
            }
          }
        },
        "description": "Provides the information for the Participant's choices for a plan."
      },
      "primaryCareProvidersResponse": {
        "required": [
          "electionStatus",
          "isProviderNetworkAvailable"
        ],
        "type": "object",
        "properties": {
          "isProviderNetworkAvailable": {
            "type": "boolean",
            "description": "Determines whether or not a network of providers is available for primary care providers.",
            "example": true
          },
          "vendorParticipantId": {
            "type": "string",
            "description": "An identifier for the participant for an external third party system if one is used for finding a provider and is available. ",
            "example": "1234-1234-1234-1234"
          },
          "electionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n",
            "example": "initialized"
          },
          "personPrimaryCareProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/primaryCareProvidersResponse_personPrimaryCareProviders"
            }
          }
        },
        "description": "Provides the Primary Plan Provider information for the Participant's account."
      },
      "reviseElectionsRequest": {
        "type": "object",
        "properties": {
          "elections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_elections"
            }
          }
        },
        "description": "Provides the information for the Participant's election."
      },
      "reviseCancelRequest": {
        "type": "object",
        "properties": {
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseCancelRequest_plans"
            }
          }
        },
        "description": "Request to cancel the revise for a set of plans."
      },
      "footnotes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/footnotes_inner"
        },
        "description": "Array of footnotes."
      },
      "customText": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/customText_inner"
        },
        "description": "Array of custom text keys."
      },
      "enrollmentMessages": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/enrollmentMessages_inner"
        },
        "description": "Array of enrollment messages."
      },
      "tipsAndAlerts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tipsAndAlerts_inner"
        },
        "description": "Array of notifications for the participant that provide information to help guide their enrollment decisions via tips and alerts."
      },
      "providerNetworksResponse": {
        "required": [
          "city",
          "planId",
          "state",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city of the person's address.",
            "example": "Cityopolis"
          },
          "state": {
            "type": "string",
            "description": "The state code of the person's address.",
            "example": "IL"
          },
          "zipcode": {
            "type": "string",
            "description": "The zip code of the person's address.",
            "example": "60000"
          },
          "planId": {
            "type": "string",
            "description": "The plan id associated with the provider product.",
            "example": "3500"
          },
          "planType": {
            "type": "string",
            "description": "An enumeration of the minor type (subtype) of this plan.\n  * `accidentInsurance`\n  * `adoptionAssistance`\n  * `commuterExpenseFlexibleSpendingAccount`\n  * `criticalIllness`\n  * `dental`\n  * `dependentAccidentalDeathAndDismemberment`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentLife`\n  * `dependentLifeAccidentalDeathAndDismemberment`\n  * `employeAssistanceProgram`\n  * `employeeAccidentalDeathAndDismemberment`\n  * `employeeBasicLifeAndAccidentalDeathAndDismemberment`\n  * `employeeLife`\n  * `employeeLongTermCare`\n  * `excessCreditsForfeiture`\n  * `excessCreditsToCash`\n  * `excessCreditsToHealthcareFlexibleSpendingAccount`\n  * `familyAccidentalDeathAndDismemberment`\n  * `familyLife`\n  * `familyLifeAndAccidentalDeathAndDismemberment`\n  * `financialPlanning`\n  * `healthCareFlexibleSpendingAccount`\n  * `healthReimbursementAccount`\n  * `healthRiskQuestionnaire` \n  * `healthSavingsAccount`\n  * `hospitalIndemnity`\n  * `identityTheft`\n  * `legal`\n  * `longTermDisability`\n  * `medical`\n  * `medicalMedicare`\n  * `otherFlexibleSpendingAccount`\n  * `pension`\n  * `prePaidLegal`\n  * `prescriptionDrug\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseLongTermCare`\n  * `standaloneQuestionnaire`\n  * `standaloneTobaccoStatus`\n  * `stockPurchasePlan`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSelling`\n  * `vision`\n  * `voluntaryBenefitsExchange`\n  * `wellnessCredit`\n  * `other`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "medical"
          },
          "vendor": {
            "type": "string",
            "description": "The external vendor being used for providers.",
            "example": "zelis"
          },
          "vendorParticipantId": {
            "type": "string",
            "description": "The participant identifier for the external vendors.",
            "example": "311dk2so-e315-r2d2-8bb8-zx3pi3141592"
          },
          "providerNetworks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/providerNetworksResponse_providerNetworks"
            },
            "description": "This array holds the provider networks for options associated with the input plan. Only options with primary care providers are returned."
          }
        },
        "description": "Provides the person information for the participant's responses. This will include the participant and dependents."
      },
      "healthPlanComparisonAvailableOptionsResponse": {
        "required": [
          "availableOptions",
          "chartId",
          "effectiveDate",
          "planId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "The plan id associated with the chart.",
            "example": "3500"
          },
          "chartId": {
            "type": "string",
            "description": "The unique identifier of the chart.",
            "example": "10"
          },
          "effectiveDate": {
            "type": "string",
            "description": "A string consisting of a the date election for the question, if the date is an electable field. ",
            "format": "date",
            "example": "2019-01-01T00:00:00"
          },
          "availableOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/healthPlanComparisonAvailableOptionsResponse_availableOptions"
            },
            "description": "This will include the details of options."
          }
        },
        "description": "Provides the participants current available options that could be compared for health plan comparison chart tool."
      },
      "healthPlanComparisonResponse": {
        "required": [
          "chartStructure",
          "healthPlanComparisonChartReferenceId",
          "planDesigns"
        ],
        "type": "object",
        "properties": {
          "healthPlanComparisonChartReferenceId": {
            "type": "string",
            "description": "ID referring to an HM Plan Choice."
          },
          "chartAttributes": {
            "$ref": "#/components/schemas/chartAttributes"
          },
          "planDesigns": {
            "$ref": "#/components/schemas/planDesigns"
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          }
        },
        "description": "Provides the health plan information for the provided composite plan design ids."
      },
      "chartAttributes": {
        "required": [
          "chartId",
          "chartTitle",
          "effectiveDate",
          "superSections"
        ],
        "type": "object",
        "properties": {
          "chartId": {
            "type": "string",
            "description": "The unique identifier of the chart.",
            "example": "10"
          },
          "chartTitle": {
            "type": "string",
            "description": "The title of the chart.",
            "example": "Health"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date on for which the data is returned.",
            "example": "2018-01-01"
          },
          "superSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chartAttributes_superSections"
            },
            "description": "The highest most section of the health plan chart."
          }
        },
        "description": "Provides the health plan chart structure information."
      },
      "planDesigns": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/planDesigns_inner"
        },
        "description": "This array holds the chart and health plan design data."
      },
      "personTasksResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/personTasksResponse_inner"
        },
        "description": "This array holds the tasks a participant has for a given business process."
      },
      "updatePersonTasksRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/updatePersonTasksRequest_inner"
        },
        "description": "An array of task updates for a person."
      },
      "reviseElectionsResponse": {
        "type": "object",
        "properties": {
          "availableOptions": {
            "$ref": "#/components/schemas/availableOptionsResponse"
          },
          "pendingElections": {
            "$ref": "#/components/schemas/pendingElectionsResponse"
          }
        },
        "description": "Provides the response to an election. If the elections isFinalElection is false, availableOptions is returned along with pendingElections otherwise for isFinalElection value of 'true' pendingElections is returned."
      },
      "eoistatusRequest": {
        "required": [
          "account",
          "birthDate",
          "carrierName",
          "firstname",
          "group",
          "lastname",
          "location",
          "personId",
          "personIdType",
          "thirdPartyId"
        ],
        "type": "object",
        "properties": {
          "carrierName": {
            "type": "string",
            "description": "This will let the code know where to look for eoi status.",
            "example": "VOYA"
          },
          "group": {
            "type": "string",
            "description": "The carrier provided value.",
            "example": "11111"
          },
          "account": {
            "type": "string",
            "description": "The carrier provided value. It can be account or customerNumber.",
            "example": "23456"
          },
          "location": {
            "type": "string",
            "description": "This will be carrier provided value to look for location.",
            "example": "11111"
          },
          "thirdPartyId": {
            "type": "string",
            "description": "The value provided by carrier and is used to validate if third party entity is allowed to access an employee record in the Statement of health application.",
            "example": "12345"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of applicant.",
            "example": "Ann"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of applicant.",
            "example": "Johnson"
          },
          "personId": {
            "type": "string",
            "description": "Id to identify person in carrier system.",
            "example": "98526312"
          },
          "personIdType": {
            "type": "string",
            "description": "It defines the typr of id we are using to identify person.",
            "example": "SSN"
          },
          "birthDate": {
            "type": "string",
            "description": "The birth date of the applicant.",
            "format": "date",
            "example": "1989-12-01T00:00:00"
          }
        },
        "description": "Provides the participant information to get the eoi status."
      },
      "eoistatusResponse": {
        "type": "object",
        "properties": {
          "coverageList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/coverages"
            },
            "description": "contains list of coverages returned from third party"
          }
        }
      },
      "coverages": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "A unique value that carrier assigns to an organization in the Statement of Health application.",
            "example": "12345"
          },
          "organizationName": {
            "type": "string",
            "description": "This is organisation name mapped in carrier.",
            "example": "Alight"
          },
          "reportNumber": {
            "type": "string",
            "description": "This is a value that carrier assigns to an organization to describe an organization's location(s) and/or population.",
            "example": "12345"
          },
          "reportName": {
            "type": "string",
            "description": "This is a word or set of words by which an organization's location(s) and/or population is known or addressed in carrier.",
            "example": "Alight"
          },
          "administrativeMemberId": {
            "type": "string",
            "description": "This is a unique value that a third party administrator assigns to an employee. This field is not included on paper Statement of Health applications.",
            "example": "12345"
          },
          "currentCoverageAmount": {
            "type": "number",
            "description": "Current coverage amount.",
            "format": "double",
            "example": 1200.0
          },
          "coverageBeginDate": {
            "type": "string",
            "description": "Effective coverage begin date.",
            "format": "date",
            "example": "2020-04-01T00:00:00"
          },
          "firstName": {
            "type": "string",
            "description": "Applicant first name.",
            "example": "Ann"
          },
          "middleName": {
            "type": "string",
            "description": "Applicant middle name.",
            "example": "Marry"
          },
          "lastName": {
            "type": "string",
            "description": "Applicant last name.",
            "example": "Johnson"
          },
          "guaranteedInsuredCoverageAmount": {
            "type": "number",
            "description": "Guranteed amount of applicant.",
            "format": "double",
            "example": 1200.0
          },
          "underwrittenCoverageAmount": {
            "type": "number",
            "description": "Underwritten amount of applicant.",
            "format": "double",
            "example": 1200.0
          },
          "requestedCoverageAmount": {
            "type": "number",
            "description": "Requested amount of applicant.",
            "format": "double",
            "example": 1200.0
          },
          "coverageStatus": {
            "type": "string",
            "description": "Status of statement of Health application.",
            "example": "Approved"
          },
          "coverageTypeCode": {
            "type": "string",
            "description": "Denotes the life or disability benefit that is underwritten and subject to Statement of Health.",
            "example": "disablity benefit"
          },
          "coverageTypeDescription": {
            "type": "string",
            "description": "This is a text description that denotes the life or disability benefit that is underwritten and subject to Statement of Health.",
            "example": "disability benefit"
          },
          "relationshipCode": {
            "type": "string",
            "description": "Denotes a member's relation to the employee. Examples are Employee, Spouse, Domestic Partner, Child or Other.",
            "example": "Spouse"
          },
          "coverageStatusDate": {
            "type": "string",
            "description": "This is the date that the coverage status was last updated. Formatted as yyyy-MM-dd HH:mm:ss.SSS.",
            "example": "2020-12-31 04:03:02.123"
          },
          "enrollmentMethodCode": {
            "type": "string",
            "description": "This denotes the method in which the Statement of Health application is first received. Examples are Web or Paper.",
            "example": "paper"
          },
          "enrollmentMethodDescription": {
            "type": "string",
            "description": "This is a text description that denotes the method in which the Statement of Health application is first received.",
            "example": "paper"
          }
        }
      },
      "enrollmentsResponse_businessProcess": {
        "required": [
          "businessProcessClassification",
          "businessProcessId",
          "businessProcessName",
          "businessProcessSummary",
          "businessProcessType"
        ],
        "type": "object",
        "properties": {
          "businessProcessId": {
            "type": "string",
            "description": "This is a source system identifier for the given business Process. \n",
            "example": "5020"
          },
          "businessProcessSummary": {
            "type": "string",
            "description": "Categorizes business processes into a summary view. This value will not be translated to another language as it is meant to be treated as an internal reference data field and not a display field to the user. \n  * `annualEnrollment` - Annual Enrollment.\n  * `statusChangeEnrollment` - Qualified mid-year status changes.\n  * `initialEnrollment` - New Hire Enrollment.\n  * `custom` - Other business process events. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "annualEnrollment"
          },
          "businessProcessType": {
            "type": "string",
            "description": "Second tier sub-category of the business process. This value will not be translated to another language as it is meant to be treated as a category and not a display field. \n  * `annualEnrollment` - Annual Enrollment.\n  * `newHireEnrollment` - New Hire Enrollment.\n  * `cobraAnnualEnrollment` - COBRA Annual Enrollment.\n  * `cobraInitialEnrollment` - COBRA Initial Enrollment.\n  * `retireeInitialEnrollment` - Retiree Enrollment.\n  * `survivorInitialEnrollment` - Survivor (of recordkeeper) Initial Enrollment.\n  * `employmentStatusChange` - Qualified mid-year status changes.\n  * `medicareAttainment` - Medicare Age Attainment Enrollment.\n  * `personalDataChange` - Personal Data Change Enrollment.\n  * `lifeEventCoverageOrEligibilityChange` - Life Event Or Coverage Eligibility Change.\n  * `lifeEventGovernmentProgramChange` - Government Life Events.\n  * `lifeEventOtherChange` - Other type of life events or changes.\n  * `custom` - Other business process events. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "annualEnrollment"
          },
          "businessProcessClassification": {
            "type": "string",
            "description": "Third tier sub-category of the business process. This gets at the most unique value of a given business process. This value will not be translated to another language as it is meant to be treated as a category and not a display field. \n  * `annualEnrollment` \n  * `retireeAnnualEnrollment` \n  * `cobraAnnualEnrollment` \n  * `newHireEnrollment` \n  * `cobraInitialEnrollment` \n  * `retireeInitialEnrollment` \n  * `survivorInitialEnrollment` \n  * `addressChange` \n  * `statusChange` \n  * `medicare` \n  * `birthAdoption` \n  * `deathOfDependent` \n  * `deathOfDomesticPartner` \n  * `deathOfSpouse` \n  * `dependentCareCostChange` \n  * `dependentPremiumAssistanceChangeGeneric` \n  * `dependentGainsPremiumAssistance` \n  * `dependentLosesPremiumAssistance` \n  * `divorceSeparation` \n  * `domesticPartnerGainsEligibility` \n  * `domesticPartnershipEnds` \n  * `gainDependentStatusGuardianshipFoster` \n  * `lossOfDependentStatus` \n  * `marriageStartOfDomesticPartnershipCommonLaw` \n  * `participantCOBRACoverageFromOtherEmployerExpires` \n  * `participantGainsEligibilityForMedicareOrMedicaid` \n  * `participantGainsEligibilityForOtherCoverage` \n  * `participantGainsPremiumAssistance` \n  * `participantLosesEligibilityForMedicareOrMedicaid` \n  * `participantLosesEligibilityForOtherCoverage` \n  * `participantLosesGovernmentCoverage` \n  * `participantLosesPremiumAssistance` \n  * `qualifiedMedicalChildSupportOrder` \n  * `spouseOrDependentAnnEnrollDoesNotMatchEmployeeAnnEnroll` \n  * `spouseOrDependentChangeInStatusWithNoEligibilityChange` \n  * `spouseOrDependentChangesEligibilityViaReturnFromUnpaidLOA` \n  * `spouseOrDependentChangesEligibilityViaStartingUnpaidLOA` \n  * `spouseOrDependentCOBRACoveragefromOtherEmployerExpires` \n  * `spouseOrDependentCoverageCostDecrease` \n  * `spouseOrDependentCoverageCostIncrease` \n  * `spouseOrDependentCoverageCurtailmentOrTermination` \n  * `spouseOrDependentGainsEligibilityGeneric` \n  * `spouseOrDependentGainsEligibilityForMedicareOrMedicaid` \n  * `spouseOrDependentGainsEligibilityViaWorkScheduleChange` \n  * `spouseOrDependentGainsEligibilityViaWorkSiteTransfer` \n  * `spouseOrDependentGainsEligibilityViaWorkStatusChange` \n  * `spouseOrDependentGoesOnStrike` \n  * `spouseOrDependentLosesEligibilityGeneric` \n  * `spouseOrDependentLosesEligibilityForMedicareOrMedicaid` \n  * `spouseOrDependentLosesEligibilityViaWorkScheduleChange` \n  * `spouseOrDependentLosesEligibilityViaWorkSiteTransfer` \n  * `spouseOrDependentLosesEligibilityViaWorkStatusChange` \n  * `spouseOrDependentLosesGovernmentCoverage` \n  * `spouseOrDependentReturnsFromStrike` \n  * `spousePlanAddsBenefitOption` \n  * `administrativeEvent` \n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "annualEnrollment"
          },
          "businessProcessName": {
            "type": "string",
            "description": "Name of the business process as defined by the source system or client team. This field can be translated into different languages. \n",
            "example": "ClientName Active Annual Enrollment"
          },
          "businessProcessSaveType": {
            "type": "string",
            "description": "Defines when elections are saved for this business process. \n  * `saveAfterPlan` - Elections Saved after completing a plan.\n  * `saveAfterCommit` - Elections Saved at end of Enrollment after clicking confirm choices and when activity closes immediately.\n  * `savePendingAfterCommit` - Elections Saved at end of Enrollment after clicking confirm choices and when activity remains open.\n",
            "example": "saveAfterCommit"
          }
        },
        "description": "Provisional data associated with the pending enrollment event."
      },
      "enrollmentsResponse_pendingPersonBusinessProcess": {
        "required": [
          "actualWindowEndDate",
          "benefitSummaryDefaultType",
          "benefitSummaryType",
          "businessProcessEffectiveDate",
          "businessProcessReferenceId",
          "businessProcessStatus",
          "communicatedWindowBeginDate",
          "communicatedWindowEndDate",
          "confirmationNumberId",
          "enrollmentCurrentCoverageType",
          "enrollmentDaysRemaining",
          "enrollmentProfile",
          "isActiveEnrollmentPath",
          "isReviewProfileEnabled",
          "lastConfirmedByUser",
          "lastConfirmedElectionDate",
          "multiplePlanYearEnrollment",
          "planYearEffectiveBeginDate",
          "totalCostSuppression"
        ],
        "type": "object",
        "properties": {
          "businessProcessStatus": {
            "type": "string",
            "description": "Defines the latest status of the pending enrollment based on whether an election has been made or not. This value will not be translated to another language as it is meant to be treated as a category and not a display field. \n  * `getReady` - Prior to the communicatedWindowBeginDate, the getReady value allows the user to prepare for the enrollment with tooling and information.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n  * `invalid` - Invalid election present.\n",
            "example": "defaulted"
          },
          "businessProcessEffectiveDate": {
            "type": "string",
            "description": "This is the effective date of the business Process (which may vary from the coverage effective begin date in some situations). Format will be CCYY-MM-DD. \n",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "planYearEffectiveBeginDate": {
            "type": "string",
            "description": "This is the plan year begin date associated with the coverage in this business process. Format will be CCYY-MM-DD. \n",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "businessProcessReferenceId": {
            "type": "string",
            "description": "This is the number associated with the specific pending enrollment on the source system. \n",
            "example": "12531234"
          },
          "confirmationNumberId": {
            "type": "string",
            "description": "This is the number displayed to the participant as a confirmation number for the business process being executed. \n",
            "example": "12531234"
          },
          "communicatedWindowBeginDate": {
            "type": "string",
            "description": "This is the date when the participant can first start making enrollment elections as part of their open enrollment window. Format will be CCYY-MM-DD. \n",
            "format": "date",
            "example": "2017-10-19T00:00:00"
          },
          "communicatedWindowEndDate": {
            "type": "string",
            "description": "This is the communicated last date the participant can make elections for this open enrollment window. Format will be CCYY-MM-DD.",
            "format": "date",
            "example": "2017-10-31T00:00:00"
          },
          "actualWindowEndDate": {
            "type": "string",
            "description": "This is the actual last date a participant can make elections before the business process is closed on the source system. Some clients allow for an extended window beyond the original communicated end date to let participants make changes. Format will be CCYY-MM-DD. \n",
            "format": "date",
            "example": "2017-11-05T00:00:00"
          },
          "lastConfirmedElectionDate": {
            "type": "string",
            "description": "This date reflects when the participant last saved elections associated with this pending enrollment. This date would only be populated if the enrollment status was 'UnconfirmedElection', 'confirmedElection', or 'invalid'. Format will be CCYY-MM-DD. \n",
            "format": "date",
            "example": "2017-10-21T00:00:00"
          },
          "lastConfirmedByUser": {
            "type": "string",
            "description": "This type code indicates whether the participant or an administrator last saved the pending enrollment. This value will not be translated to another language as it is meant to be treated as a category and not a display field. \n  * `participant` - Participant  was last to confirm.\n  * `administrator` - Administrator was last to confirm.\n",
            "example": "participant"
          },
          "multiplePlanYearEnrollment": {
            "type": "string",
            "description": "This tells us if the employee is in an enrollment period that allows elections in more than one plan year (i.e., a dual year scenario). This usually only occurs for late year new hires that could be making elections for current and next plan year. This value will not be translated to another language as it is meant to be treated as a category and not a display field.\n  * `no` - No multiple plan year enrollments.\n  * `yesEditBothYears` - Both current and future year for enrollment.\n  * `yesEditSingleYear` - Single year for both enrollment activities.\n",
            "example": "no"
          },
          "singleElectionDate": {
            "type": "string",
            "description": "This date reflects the date through which the elections made are valid for the single year. This will only be present when the participant has a dual year scenario. \n",
            "format": "date"
          },
          "enrollmentProfile": {
            "type": "string",
            "description": "This field is used to identify which enrollment flow profile a participant falls into. There will be a recommended base list of profile values, but they can be overridden at the client level. \n",
            "example": "M25"
          },
          "enrollmentCurrentCoverageType": {
            "type": "string",
            "description": "This field will be used to indicate if the enrollment should show current plan year coverage for comparison within the enrollment flow.                       \n  * `suppress` - Suppress current coverage from view.\n  * `alwaysShow` - The current coverage will always show.\n  * `hideOrShow` - The current coverage can be toggled by user.\n",
            "example": "alwaysShow"
          },
          "enrollmentDaysRemaining": {
            "type": "integer",
            "description": "This field indicates the number of days a participant has remaining in their enrollment window to make elections. \n",
            "format": "int32",
            "example": 5
          },
          "totalCostSuppression": {
            "type": "boolean",
            "description": "This field will indicate if totals should be displayed for the summary of benefit choices. This value can vary by population and by business process especially if the business process only shows a subset of plans.         \n",
            "example": true
          },
          "benefitSummaryType": {
            "type": "string",
            "description": "This field will indicate what type of pricing and credit breakdown should be shown. This can vary by population and business process. For example, participants on direct bill may need to see a monthly cost. For active participants in Annual Enrollment, they may need to see both the active and pay period costs.  This field helps define the types of costs the participant is expected to see.              \n  * `annualAndMonthly` \n  * `annualAndPayPeriod` \n  * `annualPrePostTax` \n  * `annualPrePostAndMonthlyPrePostTax` \n  * `annualPrePostAndPayPeriodPrePostTax` \n  * `annual` \n  * `monthlyPrePostTax` \n  * `monthly` \n  * `noDisplay` \n  * `payPeriod` \n  * `payPeriodPrePostTax` \n",
            "example": "annualAndMonthly"
          },
          "benefitSummaryDefaultType": {
            "type": "string",
            "description": "Indicates the default price amount to display to the participant.\n  * `annual`\n  * `adjusted`\n",
            "example": "annual"
          },
          "isActiveEnrollmentPath": {
            "type": "boolean",
            "description": "This field will indicate if the participant should be routed through a set of plans or just see the summary page. This can vary based on the business process, the population, or the state of the enrollment (for example a participant who has already saved elections once should see the summary page whereas a participant that hasn't made elections should be routed through the active path).  \n",
            "example": true
          },
          "adjustedFrequencyType": {
            "type": "string",
            "description": "The factor by which the adjusted pricing amount appears as.\n  * `annual` - Annual adjusted price.\n  * `monthly` - Monthly adjusted price.\n  * `semiMonthly` - Semi-monthly adjusted price.\n  * `payPeriod` - Pay Period adjusted price.\n  * `quarterly` - Quarterly adjusted price.\n  * `weekly` - Weekly adjusted price.\n  * `biweekly` - Bi-weekly adjusted price.\n  * `notApplicable` - Adjusted frequency type not applicable.\n",
            "example": "monthly"
          },
          "businessProcessWindowType": {
            "type": "string",
            "description": "Defines if the enrollment window closes immediately upon confirmation, or does the window remain open until the scheduled last day of the enrollment window. This field can be used to identify if the participant will be able to come back to make changes.\n  * `closeImmediately` - Window closes immediately.\n  * `remainOpen` - Participant can return to make changes.\n",
            "example": "remainOpen"
          },
          "enrollmentExperience": {
            "type": "string",
            "description": "Defines which enrollment flow the participant should see. This will be used by access points like global navigation, home page tiles, IVA, etc. to identify where to route the participant.                    \n    * `basic` \n    * `reimagine` \n    * `legacy ` \n",
            "example": "basic"
          },
          "isReviewProfileEnabled": {
            "type": "boolean",
            "description": "This field will indicate if the participant should be routed through the personal information (or profile) page to review indicative data about the participant before starting the enrollment flow.  \n",
            "example": true
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          }
        },
        "description": "Person related data associated with the pending enrollment event."
      },
      "enrollmentsResponse_enrollments": {
        "required": [
          "businessProcess",
          "pendingPersonBusinessProcess"
        ],
        "type": "object",
        "properties": {
          "businessProcess": {
            "$ref": "#/components/schemas/enrollmentsResponse_businessProcess"
          },
          "pendingPersonBusinessProcess": {
            "$ref": "#/components/schemas/enrollmentsResponse_pendingPersonBusinessProcess"
          }
        }
      },
      "eligiblePlansResponse_planToolsCodeAdditionalInfo": {
        "required": [
          "planToolsAdditionalInfoId",
          "toolAddlInfoText"
        ],
        "type": "object",
        "properties": {
          "planToolsAdditionalInfoId": {
            "type": "string",
            "description": "The internal identifier for the additional Tool info. For example, this additional info might identify the client's vendor for the tool. ",
            "example": "distance"
          },
          "planToolsAdditionalInfoFormatCode": {
            "type": "string",
            "description": "The type of data present for the additional Tool info. \n  * `character` - A character string. \n  * `date` - Date CCYY-MM-DD format. \n  * `numeric` - Numeric value.",
            "example": "numeric"
          },
          "planToolsAdditionalInfoText": {
            "type": "string",
            "description": "The data associated with the internal id for this additional info.  ",
            "example": "15"
          }
        }
      },
      "eligiblePlansResponse_planTools": {
        "required": [
          "planToolsCode"
        ],
        "type": "object",
        "properties": {
          "planToolsCode": {
            "type": "string",
            "description": "'A code that is associated with a Tool.'\n  * `carrierRatings`\n  * `healthPlanComparisonChart`\n  * `healthPlanComparisonChartDualYear`\n  * `healthPlanComparisonChartSingleYear`  \n  * `healthRiskQuestionnaire`\n  * `healthSavingsAccountModeling`\n  * `medicalExpenseEstimator`\n  * `prescriptionDrugPricing`\n  * `providerSearch`",
            "example": "providerSearch"
          },
          "toolVendor": {
            "type": "string",
            "description": "The external vendor being used for the tool.",
            "example": "zelis"
          },
          "toolVendorParticipantId": {
            "type": "string",
            "description": "The participant identifier for the external vendor.",
            "example": "311dk2so-e315-r2d2-8bb8-zx3pi3141592"
          },
          "internalSSOPartnerName": {
            "type": "string",
            "description": "The single sign-on partner name.",
            "example": "CHC"
          },
          "planToolsCodeAdditionalInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_planToolsCodeAdditionalInfo"
            },
            "description": "This array holds tools additional information for the Tool, such as attributes or information the Tool may need."
          }
        },
        "description": "This array holds tools that the Plan has associated with it."
      },
      "eligiblePlansResponse_plans": {
        "required": [
          "adjustedFrequencyType",
          "collectBeneficiaries",
          "coverageBeginDate",
          "coverageEndDate",
          "coveragePlanYear",
          "coveragePlanYearBeginDate",
          "dependentCoverageAction",
          "electionStatus",
          "electiveBenefitPlanType",
          "hasZeroTotalCost",
          "is401kPlan",
          "isEligibleForNoCoverage",
          "isInternalPlanEntity",
          "isQuestionType",
          "planDescription",
          "planId",
          "planIntroductionType",
          "planPricingType",
          "planSummary",
          "planType",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Unique Plan identifier.",
            "example": "3500"
          },
          "planDescription": {
            "type": "string",
            "description": "The description of the Plan. This field will be translated into other languages.",
            "example": "Active Medical"
          },
          "planType": {
            "type": "string",
            "description": "A code that helps describe what type of plan this is. This field is used as an internal category and isn't meant to be presented to the user. Thus it will not be translated into other languages.\n  * `accidentInsurance` \n  * `adoptionAssistance` \n  * `commuterExpenseFlexibleSpendingAccount` \n  * `criticalIllness` \n  * `dental` \n  * `dependentAccidentalDeathAndDismemberment` \n  * `dependentCareFlexibleSpendingAccount` \n  * `dependentLife` \n  * `dependentLifeAccidentalDeathAndDismemberment` \n  * `employeAssistanceProgram` \n  * `employeeAccidentalDeathAndDismemberment` \n  * `employeeBasicLifeAndAccidentalDeathAndDismemberment` \n  * `employeeLife` \n  * `employeeLongTermCare` \n  * `excessCreditsForfeiture` \n  * `excessCreditsToCash` \n  * `excessCreditsToHealthcareFlexibleSpendingAccount` \n  * `familyAccidentalDeathAndDismemberment` \n  * `familyLife` \n  * `familyLifeAndAccidentalDeathAndDismemberment` \n  * `financialPlanning` \n  * `healthCareFlexibleSpendingAccount` \n  * `healthReimbursementAccount` \n  * `healthRiskQuestionnaire` \n  * `healthSavingsAccount` \n  * `hospitalIndemnity` \n  * `identityTheft` \n  * `legal` \n  * `longTermDisability` \n  * `medical` \n  * `medicalMedicare` \n  * `otherFlexibleSpendingAccount` \n  * `pension` \n  * `prePaidLegal` \n  * `prescriptionDrug` \n  * `serviceCredit` \n  * `shortTermDisability` \n  * `spouseLongTermCare`\n  * `standaloneQuestionnaire`\n  * `standaloneTobaccoStatus`\n  * `stockPurchasePlan` \n  * `survivorIncome` \n  * `tuitionReimbursement` \n  * `undefined` \n  * `vacationBuying` \n  * `vacationSelling` \n  * `vision` \n  * `voluntaryBenefitsExchange` \n  * `wellnessCredit` \n  * `other` \n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "medical"
          },
          "planSummary": {
            "type": "string",
            "description": "A code that helps further describe what type of plan this is.\n  * `disability`\n  * `excess`\n  * `flexibleSpendingAccount`\n  * `healthCare`\n  * `lifeAndAccidentalDeath`\n  * `other`\n  * `savingsAccount`\n  * `standaloneCredit`\n  * `custom`",
            "example": "health"
          },
          "planIntroductionType": {
            "type": "string",
            "description": "A text key that is used to pull additional plan benefit details when presenting the choices to the participant. This text would usually display at the top of the Plan election page. This text may vary by population, by business process, or by choices available to the participant. ",
            "example": "TEXT_KEY"
          },
          "transactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan. This can be used later in the enrollment flow for revise requests.",
            "example": "1000"
          },
          "coverageBeginDate": {
            "type": "string",
            "description": "The effective date of the Plan.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "coverageEndDate": {
            "type": "string",
            "description": "The effective end date of the Plan.",
            "format": "date",
            "example": "2018-12-31T00:00:00"
          },
          "coveragePlanYearBeginDate": {
            "type": "string",
            "description": "The plan year date this Plan is effective in.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "coveragePlanYear": {
            "type": "string",
            "description": "The plan year CCYY this Plan is effective in.",
            "example": "2018"
          },
          "electionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n",
            "example": "initialized"
          },
          "planPricingType": {
            "type": "string",
            "description": "Determines if the price displays for this Plan, and if so, what type of pricing displays.\n  * `incremental` - Incremental price. i.e. $1 per $1,000 of coverage.\n  * `response` - Pricing varies on participant response.\n  * `standard` - Standard flat dollar pricing.\n  * `suppressed` - No price displayed.\n  * `unitized` - Unitized pricing, pricing per person.\n  * `suppressCurrentCoverageOnly` - Price not displayed for current coverage column.",
            "example": "standard"
          },
          "hasZeroTotalCost": {
            "type": "boolean",
            "description": "Determines if this Plan is able to go negative with pricing due to credits. True indicates that zeroes will show False indicates that negatives will show.",
            "example": false
          },
          "taxElectionType": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `preTax` - Pre-Tax price.\n  * `postTax` - Post-Tax price.\n  * `both` - Both Pre-Tax and Post-Tax price.\n",
            "example": "preTax"
          },
          "noCoverageOptionId": {
            "type": "string",
            "description": "Indicates the identifier for this Plan's \"No Coverage\" option.",
            "example": "3500"
          },
          "noCoverageCategoryId": {
            "type": "string",
            "description": "Indicates the identifier for this Plan's \"No Coverage\" coverage category.",
            "example": "3500"
          },
          "isEligibleForNoCoverage": {
            "type": "boolean",
            "description": "Determines if this Plan has No Coverage associated with it.",
            "example": true
          },
          "noCoverageFootnote": {
            "type": "string",
            "description": "A text key that is associated with text to display for the decline button or \"No Coverage\" option.  Spaces is returned for scenarios where no footnote text is present or should not be displayed.",
            "example": "TEXT_KEY"
          },
          "restrictedPlanId": {
            "type": "string",
            "description": "Indicates the identifier for another Plan that this Plan is dependent on. Elections cannot be made in this Plan until the restricted Plan Id has an election made.",
            "example": "7500"
          },
          "dependentCoverageAction": {
            "type": "string",
            "description": "Determines how dependents are elected for this Plan.\n  * `electDependents` - Dependents are elected into coverage.\n  * `electCoverageCategoryAndAssignDependents` - A category is elected and dependents are assigned individually.\n  * `electCoverageCategoryButNoDependents` - A category is elected and dependents aren't individually assigned into coverage.\n  * `noDependentsShown` - Dependents not shown.\n  * `displayOnly` - Dependents are displayed but coverage isn't actionable.\n",
            "example": "electDependents"
          },
          "dependentMaintenanceAction": {
            "type": "string",
            "description": "Indicates if existing dependents can be updated or not.\n  * `addAndChange` - Dependents can be added to the participants account and existing dependents can be changed.\n  * `changeOnly` - A category is elected and dependents are assigned individually.\n  * `viewOnly` - A category is elected and dependents aren't individually assigned into coverage.\n",
            "example": "addAndChange"
          },
          "collectBeneficiaries": {
            "type": "string",
            "description": "A value to show if beneficiaries are allowed for this Plan.\n  * `noBeneficiaries` - No beneficiaries elected into the plan.\n  * `optional` - Beneficiaries can be selected into the plan, but not required.\n  * `required` - Beneficiaries must be selected for the plan.\n",
            "example": "noBeneficiaries"
          },
          "electiveBenefitPlanType": {
            "type": "string",
            "description": "Indicates what type of elective benefit plan type this Plan is, if applicable.\n  * `stackedPlan` - Stacked plan elective benefit\n  * `dollarPlan` - Dollar plan elective benefit.\n  * `notApplicable` - Not of an elective benefit type plan.",
            "example": "notApplicable"
          },
          "isQuestionType": {
            "type": "boolean",
            "description": "This is a Plan that is treated more like a set of questions for the participant.",
            "example": false
          },
          "isInternalPlanEntity": {
            "type": "boolean",
            "description": "When true, this plan will not appear in the Shopping Cart.",
            "example": false
          },
          "is401kPlan": {
            "type": "boolean",
            "description": "Determines if this Plan is a 401k plan.",
            "example": false
          },
          "currentCoverageElectionType": {
            "type": "string",
            "description": "The field describes the situation of their current coverage for the plan. \n  * `notEligible` - When the participant enrolled in an option that offered an HSA/HRA plan last year, but now offering the other planType.\n  * `notAvailable` - When HSA wasn't available to the participant in the prior year.\n  * `notOffered` - Used to handle the 'other' plans that don't have a match on personHealthManagement for the participant, typically newly offered plans for the business process opportunity. ",
            "example": "notEligible"
          },
          "isCreditCapped": {
            "type": "boolean",
            "description": "Determines if the credits are capped to the cost of the plan. In other words, the amount cannot go negative because the credit offered is higher than the cost of coverage. For true, the credit cannot create a negative price. For false, the credit can go beyond the cost of coverage and create a negative price.",
            "example": true
          },
          "planTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_planTools"
            }
          }
        },
        "description": "Plans, along with their attributes and tools."
      },
      "eligiblePlansResponse_nonPlanToolsAdditionalInfo": {
        "required": [
          "nonPlanToolsAdditionalInfoId",
          "nonPlanToolsAdditionalInfoText"
        ],
        "type": "object",
        "properties": {
          "nonPlanToolsAdditionalInfoId": {
            "type": "string",
            "description": "The internal identifier for the additional Non-Plan Tool info.",
            "example": "key"
          },
          "nonPlanToolsAdditionalInfoFormatCode": {
            "type": "string",
            "description": "The type of data present for the additional Non-Plan Tool info.\n  * `character` - A character string.\n  * `date` - Date CCYY-MM-DD format.\n  * `numeric` - Numeric value.",
            "example": "date"
          },
          "nonPlanToolsAdditionalInfoText": {
            "type": "string",
            "description": "The data of data present for the additional Non-Plan Tool info.",
            "example": "2018-01-01"
          }
        }
      },
      "eligiblePlansResponse_nonPlanTools": {
        "required": [
          "nonPlanToolsCode"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The date associated with the Non-Plan tool code.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "nonPlanToolsCode": {
            "type": "string",
            "description": "A code that is associated with a Non-Plan Tool.  ",
            "example": "heatlhcareCostSummary"
          },
          "toolVendor": {
            "type": "string",
            "description": "The external vendor being used for the tool.",
            "example": "zelis"
          },
          "toolVendorParticipantId": {
            "type": "string",
            "description": "The participant identifier for the external vendor.",
            "example": "311dk2so-e315-r2d2-8bb8-zx3pi3141592"
          },
          "internalSSOPartnerName": {
            "type": "string",
            "description": "The single sign-on partner name.",
            "example": "ALX"
          },
          "nonPlanToolsAdditionalInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_nonPlanToolsAdditionalInfo"
            }
          }
        },
        "description": "This array holds tools that are not associated with any Plan."
      },
      "eligiblePlansResponse_eligiblePlans": {
        "required": [
          "eligiblePlanCode"
        ],
        "type": "object",
        "properties": {
          "eligiblePlanCode": {
            "type": "string",
            "description": "Identifies the type of plan information.\n  * `AE` - Pending Enrollment Data \n",
            "example": "AE"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_plans"
            }
          },
          "nonPlanTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligiblePlansResponse_nonPlanTools"
            }
          }
        }
      },
      "eligibleDependentsResponse_dependentPlans": {
        "required": [
          "dependentTransactionId",
          "planId",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "The identifier associated with this Plan.",
            "example": "3500"
          },
          "transactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan. This can be used later in the enrollment flow for PUT requests.",
            "example": "3500"
          },
          "dependentTransactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan's dependent coverage data. This can be used later in the enrollment flow for PUT requests.",
            "example": "3505"
          },
          "eligibleRelationships": {
            "$ref": "#/components/schemas/eligibleRelationships"
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          }
        },
        "description": "Plans, along with their attributes and tools."
      },
      "eligibleDependentsResponse_eligibleDependents": {
        "type": "object",
        "properties": {
          "dependentPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eligibleDependentsResponse_dependentPlans"
            }
          },
          "dependents": {
            "$ref": "#/components/schemas/dependents"
          }
        },
        "description": "Provides the Plan information for the Participant's Dependents."
      },
      "eligibleRelationships_inner": {
        "required": [
          "dependentPersonInternalId",
          "isDependentCoveredActual",
          "isDependentCoveredElection",
          "isDependentPotentiallyEligible"
        ],
        "type": "object",
        "properties": {
          "dependentPersonInternalId": {
            "type": "string",
            "description": "The internal identifier associated with the participant's dependent relation.",
            "example": "123456789"
          },
          "isDependentPotentiallyEligible": {
            "type": "boolean",
            "description": "Indicates whether or not the Dependent is potentially eligible for this plan. If false, the dependent is eligible. Dependents not in this array are not eligible. If true, the dependent is potentially eligible.",
            "example": false
          },
          "isDependentCoveredElection": {
            "type": "boolean",
            "description": "Indicates whether or not the Dependent has been elected to be covered under this Plan.",
            "example": true
          },
          "isDependentCoveredActual": {
            "type": "boolean",
            "description": "Indicates whether or not the Dependent is currently covered under this Plan.",
            "example": true
          },
          "pendingApprovalSummary": {
            "type": "string",
            "description": "The reason code as to why approval is needed for coverage in this Plan. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `evidenceOfInsurability` - Evidence of insurability (EOI) form.\n  * `dependentVerification` - Dependent verification request.\n  * `medicareAdvantageDisenrollment ` - Medicare Advantage Disenrollment form.\n  * `medicareAdvantageEnrollment ` - Medicare Advantage Enrollment form.\n  * `hsaTurnaround` - HSA turnaround form for bank.\n",
            "example": "evidenceOfInsurability"
          },
          "pendingApprovalType": {
            "type": "string",
            "description": "This field indicates if the pending approval is at the option, coverage amount, or coverage category level. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present. \n  * `dependent` - Dependent based approval.\n  * `option` - Option based approval.\n  * `coverage` - Coverage based approval.\n  * `coverageCategory` - Coverage Category based approval.\n  * `optionCoverage` - Option and Coverage Category based approval.\n  * `custom` - Custom based approval. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "option"
          },
          "pendingApprovalReferenceId": {
            "type": "string",
            "description": "The approval identifier associated approval business process.",
            "example": ""
          },
          "enrollmentMessages": {
            "$ref": "#/components/schemas/enrollmentMessages"
          }
        },
        "description": "Dependent Coverage information for the participant."
      },
      "dependents_inner": {
        "required": [
          "birthDate",
          "dependentPersonInternalId",
          "firstName",
          "gender",
          "lastName",
          "middleName",
          "relationshipDescription",
          "relationshipType",
          "suffix"
        ],
        "type": "object",
        "properties": {
          "dependentPersonInternalId": {
            "type": "string",
            "example": "123456789"
          },
          "relationshipType": {
            "type": "string",
            "description": "A code value that can be used for logical checks for the relationship.\n  * `TO BE DETERMINED`\n  * `child`\n  * `spouse`\n  * `other`",
            "example": "child"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "Identifies the relation of the Dependent to the Participant. The description presented to the participant.",
            "example": "Child"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the Dependent.",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the Dependent.",
            "example": "Jacob"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the Dependent.",
            "example": "Doe"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix of the Dependent. Comes across as entered by the participant.",
            "example": "IV"
          },
          "birthDate": {
            "type": "string",
            "description": "Birth Date of the Dependent. ISO 8601 date format.",
            "format": "date",
            "example": "2016-11-02T00:00:00"
          },
          "gender": {
            "type": "string",
            "description": "The gender type that can be used for logic checks. * `TO BE DETERMINED` * `male` * `female`",
            "example": "male"
          }
        },
        "description": "Provides the Plan information for the Participant's Dependents."
      },
      "pendingElectionsResponse_option_benefitAmounts": {
        "required": [
          "benefitAmountsCoverageId",
          "benefitAmountsDescription",
          "benefitAmountsSequence"
        ],
        "type": "object",
        "properties": {
          "benefitAmountsCoverageId": {
            "type": "string",
            "description": "The identifier associated with this benefit amount coverage values.",
            "example": "3502"
          },
          "benefitAmountsSequence": {
            "type": "integer",
            "description": "The sequence of the coverage used for a display sort order.",
            "format": "int32",
            "example": 10
          },
          "benefitAmountsDescription": {
            "type": "string",
            "description": "The description associated with this benefit amount coverage values.",
            "example": "Aetna"
          },
          "actualCoverageAmount": {
            "type": "number",
            "description": "The coverage amount offered by this option.   Example - Life insurance plan with $50,000 coverage.  This is a numeric field representing a dollar amount. Not usually used in conjunction with increments or min/max amounts.",
            "format": "double",
            "example": 0.0
          },
          "actualIncrementQuantity": {
            "type": "integer",
            "description": "This is a numeric field representing the actual number increments for a participant's plan. If a participant was electing an increment for Vacation Days, this would be the number of days the participant has chosen.",
            "format": "int32",
            "example": 0
          },
          "electedCoverageAmount": {
            "type": "number",
            "description": "The elected coverage amount by the participant.",
            "format": "double",
            "example": 0.0
          },
          "electedIncrementQuantity": {
            "type": "integer",
            "description": "This is a numeric field representing the election of increments for a participant. If a participant was electing an increment for Vacation Days, this would be the number of days the participant has chosen.",
            "format": "int32",
            "example": 0
          },
          "incrementType": {
            "type": "string",
            "description": "Type specifying what the increment amounts relating to this structure represent.\n  * `days`\n  * `dollars`\n  * `weeks`\n  * `hours`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "days"
          }
        },
        "description": "Benefit Amount level Coverage information for the Participant's Option."
      },
      "pendingElectionsResponse_option_sideFund": {
        "required": [
          "actualAdjustedSideFundAmount",
          "actualSideFundAmount",
          "sideFundAdjustedFrequencyType"
        ],
        "type": "object",
        "properties": {
          "actualSideFundAmount": {
            "type": "number",
            "description": "The dollar amount for the side fund.",
            "format": "double",
            "example": 1200.0
          },
          "actualAdjustedSideFundAmount": {
            "type": "number",
            "description": "The adjusted (monthly/payperiod) side fund amount.",
            "format": "double",
            "example": 100.0
          },
          "electedSideFundAmount": {
            "type": "number",
            "description": "The elected dollar amount for the side fund.",
            "format": "double",
            "example": 1200.0
          },
          "electedAdjustedSideFundAmount": {
            "type": "number",
            "description": "The adjusted (monthly/payperiod) elected side fund amount.",
            "format": "double",
            "example": 100.0
          },
          "sideFundAdjustedFrequencyType": {
            "type": "string",
            "description": "The factor by which the adjusted pricing amount appears as.\n  * `annual` - Annual adjusted price.\n  * `monthly` - Monthly adjusted price.\n  * `semiMonthly` - Semi-monthly adjusted price.\n  * `payPeriod` - Pay Period adjusted price.\n  * `quarterly` - Quarterly adjusted price.\n  * `weekly` - Weekly adjusted price.\n  * `biweekly` - Bi-weekly adjusted price.\n  * `notApplicable` - Adjusted frequency type not applicable.\n",
            "example": "monthly"
          }
        },
        "description": "Side Fund level Coverage information for the Participant's Option."
      },
      "pendingElectionsResponse_option": {
        "required": [
          "actualCoverageCategoryDescription",
          "actualCoverageCategoryId",
          "actualCoverageCategoryType",
          "actualOptionDescription",
          "actualOptionId",
          "electedCoverageCategoryDescription",
          "electedCoverageCategoryId",
          "electedCoverageCategoryType",
          "electedOptionDescription",
          "electedOptionId",
          "isEligibleForNoCoverage",
          "isParticipantCovered",
          "isSideFundAllowed",
          "primaryCareProviderDesignationType"
        ],
        "type": "object",
        "properties": {
          "noCoverageOptionId": {
            "type": "string",
            "description": "Provides the source system ID for the 'No Coverage' option. If this field is zero, then that indicates this plan doesn't offer No Coverage or waived coverage.",
            "example": "3501"
          },
          "noCoverageCategoryId": {
            "type": "string",
            "description": "Provides the Coverage Category ID for the 'No Coverage' coverage category.",
            "example": "20"
          },
          "isEligibleForNoCoverage": {
            "type": "boolean",
            "description": "Indicates if the participant can elect a no coverage option or waive coverage.",
            "example": true
          },
          "isParticipantCovered": {
            "type": "boolean",
            "description": "Indicates whether or not the participant is covered in this plan.",
            "example": true
          },
          "actualOptionId": {
            "type": "string",
            "description": "Provides the source system ID for the Option the participant is enrolled in.",
            "example": "3701"
          },
          "actualCoverageCategoryId": {
            "type": "string",
            "description": "Provides the Coverage Category ID for the Option the participant is enrolled in.",
            "example": "30"
          },
          "actualOptionDescription": {
            "type": "string",
            "description": "The description of the Option.",
            "example": "Aetna PPO"
          },
          "actualOptionType": {
            "type": "string",
            "description": "This is a static code that is used to identify what type of plan design product the actual option id is. This field is used as an internal category and isn't meant to be presented to the user. This field will not be translated into other languages.\n  * `accident`\n  * `adoptionAssistance`\n  * `childBasicLife`\n  * `childSupplementalLife`\n  * `commuterExpenseFlexibleSpendingAccount\n  * `indemnity`\n  * `pointOfService`\n  * `preferredProviderOrganization`\n  * `healthMaintenanceOrganization`\n  * `criticalIllness`\n  * `dental`\n  * `dentalHealthMaintenanceOrganization`\n  * `dentalIndemnity`\n  * `dependentBasicLife`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentSupplementalLife`\n  * `employeeAssistanceProgram`\n  * `employeeBasicLife`\n  * `employeeLongTermCare`\n  * `employeeSupplementalLife`\n  * `exclusiveProviderOrganization`\n  * `exclusiveProviderOrganizationHmo`\n  * `exclusiveProviderOrganizationIndemnity`\n  * `exclusiveProviderOrganizationPpo`\n  * `familyBasicLife`\n  * `familySupplementalLife`\n  * `financialPlan`\n  * `groupLegal`\n  * `healthcareFlexibleSpendingAccount`\n  * `healthReimbursementAccount`\n  * `healthSavingsAccountFamily`\n  * `healthSavingsAccountIndividual`\n  * `hearing`\n  * `hospital`\n  * `identityTheft`\n  * `invalid`\n  * `longTermDisability`\n  * `mixed`\n  * `noCoverage`\n  * `other`\n  * `otherFlexibleSpendingAccount`\n  * `prepaidLegal`\n  * `prescriptionDrug`\n  * `retireeBasic`\n  * `retireeSupplemental`\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseBasicLife`\n  * `spouseLongTermCare`\n  * `spouseSupplementalLife`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSell`\n  * `vision`\n  * `wellnessCredit`\n  * `medical`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "preferredProviderOrganization"
          },
          "actualCoverageCategoryDescription": {
            "type": "string",
            "description": "The description of the Coverage Category that is presented to the participant.",
            "example": "You + Family"
          },
          "actualCoverageCategoryType": {
            "type": "string",
            "description": "A common value that defines the Coverage Category that can be used for logical checks\n  * `childrenOnly`\n  * `dependentOnly`\n  * `noCoverage`\n  * `other`\n  * `participantChildren`\n  * `participantFamily`\n  * `participantOnly`\n  * `participantSpouse`\n  * `spouseChildren`\n  * `spouseOnly`\n  * `unbundled`\n  * `undefined`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "participantFamily"
          },
          "actualOptionTaxCode": {
            "type": "string",
            "description": "The tax code associated with the Option, the actual value.\n  * `postTax` - Post-Tax plan pricing.\n  * `preTax` - Pre-Tax plan pricing.\n  * `split` - Split Post-Tax and Pre-Tax pricing apply. \n",
            "example": "preTax"
          },
          "electedOptionId": {
            "type": "string",
            "description": "Provides the source system ID for the Option the participant elected.",
            "example": "3501"
          },
          "electedOptionDescription": {
            "type": "string",
            "description": "The description of the Option elected by the participant.",
            "example": "Aetna PPO"
          },
          "electedOptionType": {
            "type": "string",
            "description": "This is a static code that is used to identify what type of plan design product the elected option id is. This field is used as an internal category and isn't meant to be presented to the user. This field will not be translated into other languages.\n  * `accident`\n  * `adoptionAssistance`\n  * `childBasicLife`\n  * `childSupplementalLife`\n  * `commuterExpenseFlexibleSpendingAccount\n  * `indemnity`\n  * `pointOfService`\n  * `preferredProviderOrganization`\n  * `healthMaintenanceOrganization`\n  * `criticalIllness`\n  * `dental`\n  * `dentalHealthMaintenanceOrganization`\n  * `dentalIndemnity`\n  * `dependentBasicLife`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentSupplementalLife`\n  * `employeeAssistanceProgram`\n  * `employeeBasicLife`\n  * `employeeLongTermCare`\n  * `employeeSupplementalLife`\n  * `exclusiveProviderOrganization`\n  * `exclusiveProviderOrganizationHmo`\n  * `exclusiveProviderOrganizationIndemnity`\n  * `exclusiveProviderOrganizationPpo`\n  * `familyBasicLife`\n  * `familySupplementalLife`\n  * `financialPlan`\n  * `groupLegal`\n  * `healthcareFlexibleSpendingAccount`\n  * `healthReimbursementAccount`\n  * `healthSavingsAccountFamily`\n  * `healthSavingsAccountIndividual`\n  * `hearing`\n  * `hospital`\n  * `identityTheft`\n  * `invalid`\n  * `longTermDisability`\n  * `mixed`\n  * `noCoverage`\n  * `other`\n  * `otherFlexibleSpendingAccount`\n  * `prepaidLegal`\n  * `prescriptionDrug`\n  * `retireeBasic`\n  * `retireeSupplemental`\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseBasicLife`\n  * `spouseLongTermCare`\n  * `spouseSupplementalLife`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSell`\n  * `vision`\n  * `wellnessCredit`\n  * `medical`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "preferredProviderOrganization"
          },
          "electedCoverageCategoryId": {
            "type": "string",
            "description": "The description of the Coverage Category elected by the participant.",
            "example": "30"
          },
          "electedCoverageCategoryDescription": {
            "type": "string",
            "description": "The description of the Coverage Category elected by the participant.",
            "example": "You + Family"
          },
          "electedCoverageCategoryType": {
            "type": "string",
            "description": "A common value that defines the Coverage Category that can be used for logical checks.\n  * `childrenOnly`\n  * `dependentOnly`\n  * `noCoverage`\n  * `other`\n  * `participantChildren`\n  * `participantFamily`\n  * `participantOnly`\n  * `participantSpouse`\n  * `spouseChildren`\n  * `spouseOnly`\n  * `unbundled`\n  * `undefined`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "participantFamily"
          },
          "electedOptionTaxCode": {
            "type": "string",
            "description": "The tax code associated with the Option, the elected value.\n  * `postTax` - Post-Tax plan pricing.\n  * `preTax` - Pre-Tax plan pricing.\n  * `split` - Split Post-Tax and Pre-Tax pricing apply. \n",
            "example": "preTax"
          },
          "primaryCareProviderDesignationType": {
            "type": "string",
            "description": "This field indicates if the option has in network provider details and whether the option requires a primaryCareProvider election for newly covered family members or just provides a primaryCareProvider lookup. \n  * `providerLookupOnly` - Allows a look up to see if providers are in network.\n  * `providerElection` - Allows for provider elections.\n  * `notApplicable` - Provider designation does not apply.\n",
            "example": "providerLookupOnly"
          },
          "savingsAccountPlanChoiceId": {
            "type": "string",
            "description": "Savings Account ID, or Health Savings Account, tied to this option. This would only ever be populated for a Medical plan if a Health Savings Account is applicable to this option. This will be tied to the account plan value to match to a savings account plan.",
            "example": "120"
          },
          "dependentOngoingVerificationCode": {
            "type": "string",
            "description": "Dependent verification code to determine if it is applicable for this plan.\n  * `closed` - Dependent verification is available but currently closed.\n  * `open` - Dependent verification is available and open.\n",
            "example": "open"
          },
          "isSideFundAllowed": {
            "type": "boolean",
            "description": "Certain plan types allow for a side fund that allows for a coverage amount entry that is associated with the plan. This code informs us that this side fund is present.",
            "example": false
          },
          "benefitAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_option_benefitAmounts"
            }
          },
          "sideFund": {
            "$ref": "#/components/schemas/pendingElectionsResponse_option_sideFund"
          }
        },
        "description": "Option Type Coverage information for the Participant."
      },
      "pendingElectionsResponse_relationshipCoverages": {
        "required": [
          "dependentTransactionId"
        ],
        "type": "object",
        "properties": {
          "dependentTransactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan's dependent coverage data. This can be used later in the enrollment flow for PUT requests.",
            "example": "3505"
          },
          "eligibleRelationships": {
            "$ref": "#/components/schemas/eligibleRelationships"
          }
        },
        "description": "Relationship Coverage information for the Participant."
      },
      "pendingElectionsResponse_accountPlan_contributionSources": {
        "required": [
          "adjustedActualContributionAmount",
          "adjustedContributionPostTaxAmount",
          "adjustedContributionPreTaxAmount",
          "adjustedElectedContributionAmount",
          "annualActualContributionAmount",
          "annualContributionPostTaxAmount",
          "annualContributionPreTaxAmount",
          "annualElectedContributionAmount",
          "contributionDisplaySequence",
          "contributionSourcesDescription",
          "contributionSourcesId"
        ],
        "type": "object",
        "properties": {
          "contributionSourcesId": {
            "type": "string",
            "description": "Reference identifier object for a contribution source.",
            "example": "20"
          },
          "contributionDisplaySequence": {
            "type": "integer",
            "description": "The sequence the source should be presented in. This can be a decimal number.",
            "format": "int32",
            "example": 10
          },
          "electionContributionFrequency": {
            "type": "string",
            "description": "The frequency of the contribution being elected by the participant.  \n  * `annual` - Annual adjusted contributions.\n  * `monthly` - Monthly adjusted contributions.\n  * `semiMonthly` - Semi-monthly adjusted contributions.\n  * `payPeriod` - Pay Period adjusted contributions.\n  * `quarterly` - Quarterly adjusted contributions.\n  * `weekly` - Weekly adjusted contributions.\n  * `biweekly` - Bi-weekly adjusted contributions.\n  * `notApplicable` - Contribution frequency type not applicable.\n",
            "example": "monthly"
          },
          "sourceFrequency": {
            "type": "string",
            "description": "The frequency of the source.  \n  * `annual` - Annual adjusted contributions.\n  * `monthly` - Monthly adjusted contributions.\n  * `semiMonthly` - Semi-monthly adjusted contributions.\n  * `payPeriod` - Pay Period adjusted contributions.\n  * `quarterly` - Quarterly adjusted contributions.\n  * `weekly` - Weekly adjusted contributions.\n  * `biweekly` - Bi-weekly adjusted contributions.\n  * `notApplicable` - Contribution frequency type not applicable.\n",
            "example": "monthly"
          },
          "contributionSourcesType": {
            "type": "string",
            "description": "Enumerated type specifying from who/what the contribution is funded.\n  * `employeeContribution` -Employees contributions.\n  * `employerMatch` - Employer matches amount.\n  * `employerSeed` - Employer provided amount.\n  * `excess` - Excess credits contribution source type.\n",
            "example": "employeeContribution"
          },
          "contributionSourcesTaxationType": {
            "type": "string",
            "description": "Enumerated type specifying the tax status of the contribution source.\n  * `preTax` - Pre-Tax contribution.\n  * `postTax` - Post-Tax contribution.\n",
            "example": "preTax"
          },
          "contributionSourcesDescription": {
            "type": "string",
            "description": "Readable description of the contribution source.",
            "example": "Employee Contribution"
          },
          "adjustedContributionPreTaxAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's adjusted before tax contribution source amount for an option.",
            "format": "double",
            "example": 200.0
          },
          "adjustedContributionPostTaxAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's adjusted after tax contribution source amount for an option.",
            "format": "double",
            "example": 0.0
          },
          "annualContributionPreTaxAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's annual before tax contribution source amount for an option.",
            "format": "double",
            "example": 2400.0
          },
          "annualContributionPostTaxAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's annual after tax contribution source amount for an option.",
            "format": "double",
            "example": 0.0
          },
          "adjustedActualContributionAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's actual adjusted contribution amount for an option.",
            "format": "double",
            "example": 200.0
          },
          "annualActualContributionAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's actual annual contribution amount for an option.",
            "format": "double",
            "example": 2400.0
          },
          "adjustedElectedContributionAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's elected adjusted contribution amount for an option.",
            "format": "double",
            "example": 200.0
          },
          "annualElectedContributionAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's elected annual contribution amount for an option.",
            "format": "double",
            "example": 2400.0
          }
        },
        "description": "Contribution Sources for the Account Plan coverage for the Participant."
      },
      "pendingElectionsResponse_accountPlan": {
        "required": [
          "actualAdjustedGoalAmount",
          "actualAnnualGoalAmount",
          "electedAdjustedGoalAmount",
          "electedAnnualGoalAmount",
          "isElectionAmountAnnual"
        ],
        "type": "object",
        "properties": {
          "actualAnnualGoalAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's annual goal amount.",
            "format": "double",
            "example": 1200.0
          },
          "actualAdjustedGoalAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's adjusted goal amount.",
            "format": "double",
            "example": 100.0
          },
          "electedAnnualGoalAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's elected annual goal amount.",
            "format": "double",
            "example": 1200.0
          },
          "electedAdjustedGoalAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's adjusted goal amount.",
            "format": "double",
            "example": 100.0
          },
          "vendorId": {
            "type": "string",
            "description": "The identifier of the vendor for the Account Plan.",
            "example": "3505"
          },
          "vendorType": {
            "type": "string",
            "description": "The type of the vendor for the Account Plan.  Allows for calls to certain vendors to get current balance for HSA plans if needed.\n  * `alegeus`\n  * `umb`\n  * `other`",
            "example": "alegeus"
          },
          "vendorDescription": {
            "type": "string",
            "description": "The name of the vendor for the Account Plan, the full company name.",
            "example": "Bank"
          },
          "savingsAccountPlanChoiceId": {
            "type": "string",
            "description": "Savings Account ID, or Health Savings Account, tied to this account plan. This would only ever be populated for a savings account type plan. This will be tied to the option object's value of the same name to match that option to this  account plan.",
            "example": "3505"
          },
          "isLimitedPurpose": {
            "type": "boolean",
            "description": "A boolean value denoting whether or not this spending account is limited purpose due to elections the participant has made in this enrollment activity.",
            "example": true
          },
          "contributionSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_accountPlan_contributionSources"
            }
          }
        },
        "description": "Account plan coverage information for the Participant."
      },
      "pendingElectionsResponse_creditsAndSurcharges": {
        "required": [
          "adjustedAmount",
          "annualAmount",
          "creditsAndSurchargesDescription",
          "creditsAndSurchargesId",
          "effectiveBeginDate",
          "effectiveEndDate",
          "electionStatus",
          "electionType",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "creditsAndSurchargesId": {
            "type": "string",
            "description": "Reference identifier object for a credit or surcharge.",
            "example": "1000"
          },
          "transactionId": {
            "type": "string",
            "description": "The transaction identifier associated with this credit.",
            "example": "1001"
          },
          "electionType": {
            "type": "string",
            "description": "Defines the layout of the election page, and how the user should enroll into the benefit. \n  * `creditByCoverageCategory` - A credit that varies on the coverage category.\n  * `creditByOption` - A credit that varies on the option.\n  * `creditByOptionAndCoverageCategory` - A credit that varies on the option and coverage category.\n  * `creditByOptionCoverageCategoryAnswer` - A credit that varies on the option, coverage category, and resposne to a quesiton.\n  * `creditByPlan` - A credit provided on the plan level that doesnt vary on other items such as option, coverage category, or response code.\n  * `multipleCreditAnswerRequired` - A credit based on participant''s responses to multiple questions.\n  * `standaloneCredit` - A flat dollar credit not based on any other part of the business process.\n  * `standaloneCreditByAnswer` - A credit based on participant''s response to a question.\n  * `tobaccoResponseProtected` - A Tobacco type credit. Response Codes are present but limited to a single response code in plan election pages and is protected.  \n",
            "example": "creditByCoverageCategory"
          },
          "effectiveBeginDate": {
            "type": "string",
            "description": "Credit effective begin date; this date is unique to the credit and the event, and can vary between credits.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "effectiveEndDate": {
            "type": "string",
            "description": "Credit effective end date; this date will be equal to the plan year end date, unless otherwise specified.",
            "format": "date",
            "example": "2018-12-31T00:00:00"
          },
          "electionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n",
            "example": "unconfirmedElection"
          },
          "annualAmount": {
            "type": "number",
            "description": "This is a numeric field representing the annual credit or surcharge amount a person receives.",
            "format": "double",
            "example": 120.0
          },
          "adjustedAmount": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted credit or surcharge amount a person receives.",
            "format": "double",
            "example": 10.0
          },
          "taxationType": {
            "type": "string",
            "description": "Field representing if a credit or surcharge is post-tax or pre-tax for a person.   \n  * `preTax` - Pre-Tax credit.\n  * `postTax` - Post-Tax credit.\n",
            "example": "preTax"
          },
          "creditsAndSurchargesDescription": {
            "type": "string",
            "description": "Long description of this credit or surcharge",
            "example": "Healthy Lifestyle Credit"
          },
          "creditsAndSurchargesLabel": {
            "type": "string",
            "description": "Short description of this credit or surcharge",
            "example": "Health Credit"
          },
          "creditsAndSurchargesType": {
            "type": "string",
            "description": "Enumerated type specifying the type of credit or surcharge.\n  * `healthRiskQuestionnaire`\n  * `inPlanQuestionCredit`\n  * `inPlanNoQuestionCredit`\n  * `inPlanQuestionSurcharge`\n  * `inPlanNoQuestionSurcharge`\n  * `planEmployerSubsidy`\n  * `standaloneQuestionCredit`\n  * `standaloneNoQuestionCredit`\n  * `standaloneQuestionSurcharge`\n",
            "example": "inPlanNoQuestionCredit"
          }
        },
        "description": "Credit and Surcharges Coverage information for the Participant."
      },
      "pendingElectionsResponse_participantAnswers": {
        "required": [
          "actualAnswerValue",
          "electedAnswerValue"
        ],
        "type": "object",
        "properties": {
          "actualAnswerValue": {
            "type": "string",
            "description": "This is the system value for an answer that the participant has as their value.",
            "example": "S"
          },
          "electedAnswerValue": {
            "type": "string",
            "description": "This is the system value for an answer that the participant has as their elected value.",
            "example": "S"
          }
        },
        "description": "Participant Answers"
      },
      "pendingElectionsResponse_answers": {
        "required": [
          "answersLabel",
          "answersValue"
        ],
        "type": "object",
        "properties": {
          "answersValue": {
            "type": "string",
            "description": "This is the system value for an answer. This is used to tie to participantAnswers answer value to get the full descriptions if needed. This value is the raw system value.",
            "example": "S"
          },
          "answersLabel": {
            "type": "string",
            "description": "This is a shortened version of the answer. This label could be translated as needed. This will return a more formatted value and add commas, dollar signs, and percent signs to the answer.",
            "example": "Smoker"
          }
        },
        "description": "Answers"
      },
      "pendingElectionsResponse_questions": {
        "required": [
          "answersType",
          "answersValidValueType",
          "effectiveDate",
          "isEffectiveDateElectable",
          "isQuestionProtected",
          "isShowEffectiveDate",
          "personInternalId",
          "questionsElectionStatus",
          "questionsId",
          "questionsLabel",
          "questionsRequiredType",
          "questionsTransactionId",
          "questionsType"
        ],
        "type": "object",
        "properties": {
          "questionsLabel": {
            "type": "string",
            "description": "A description of the question that is presented to the participant. This description could be translated into a foreign language as needed.",
            "example": "Employee Smoker Status"
          },
          "personInternalId": {
            "type": "string",
            "description": "The participant or dependent this question is being asked to.",
            "example": "123456789"
          },
          "questionsTransactionId": {
            "type": "string",
            "description": "The transaction identifier for the question.",
            "example": "2020"
          },
          "questionsElectionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n  * `notApplicable` - A status is not applicable for this question because isQuestionProtected is true.\n",
            "example": "unconfirmedElection"
          },
          "questionsId": {
            "type": "string",
            "description": "Reference identifier object for a question. This would be an internal id for CDD, option response code, or credit response code.",
            "example": "EE-SMKR-STAT-CD"
          },
          "effectiveDate": {
            "type": "string",
            "description": "A string consisting of a source system begin date for an answer.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "answersType": {
            "type": "string",
            "description": "An enumerated type specifying the format of the answer.\n  * `date` - CCYY-DD-MM format\n  * `float` - 12 digits with up to 6 digits after the decimal\n  * `integer` - 10 digits, signed\n  * `money` - 12 digits with 2 digits after the decimal\n  * `text` - 30 characters in length\n  * `percent` - 3 digits in length with 3 digits after the decimal\n  * `phone` - 30 characters in length, formatted phone number. \n",
            "example": "text"
          },
          "questionsType": {
            "type": "string",
            "description": "An enumerated type specifying the type of question. \n  * `parent` - Question that is a parent question. Depending on the response, subquestions will appear.\n  * `subquestion` - A child to the parent question. Only displays if a particular response is selected to the parent question or previous subquestion.\n  * `standalone` - A standalone plan question. \n",
            "example": "standalone"
          },
          "answersValidValueType": {
            "type": "string",
            "description": "Helps determine how the Question should display to properly capture a response from the participant for definedValueValues.\n  * `match` - A set of valid values is provided, answer must match.\n  * `range` - A range of valid values is provided.\n  * `none` - Does not apply.\n",
            "example": "match"
          },
          "isShowEffectiveDate": {
            "type": "boolean",
            "description": "Determines if the effectiveDate is shown for this question.",
            "example": false
          },
          "isEffectiveDateElectable": {
            "type": "boolean",
            "description": "Determines if the effectiveDate is able to be updated for this question.",
            "example": false
          },
          "isQuestionProtected": {
            "type": "boolean",
            "description": "Whether or not the question can be updated. If protected this question is for display only.",
            "example": false
          },
          "questionsRequiredType": {
            "type": "string",
            "description": "Determines if a response is required for this Question.\n  * `alwaysRequired`\n  * `requiredIfCovered`\n  * `optional`",
            "example": "alwaysRequired"
          },
          "participantAnswers": {
            "$ref": "#/components/schemas/pendingElectionsResponse_participantAnswers"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_answers"
            }
          }
        },
        "description": "Questions"
      },
      "pendingElectionsResponse_questionnaires": {
        "required": [
          "creditsAndSurchargesId",
          "questionnairesDescription"
        ],
        "type": "object",
        "properties": {
          "questionnairesDescription": {
            "type": "string",
            "description": "Long description of this questionnaire grouping.",
            "example": "Tobacco Status"
          },
          "questionnairesType": {
            "type": "string",
            "description": "An enumerated type specifying the type of questionnaire grouping.\n  * `inPlanNoAmount` - Questions asked to a participant associated with a particular plan. Does not change plan pricing.\n  * `inPlanDependentNoAmount` -  Questions asked to a participant in regards to a dependent. This question associated with a particular plan. Does not change plan pricing.\n  * `inPlanCreditsAndSurcharges` -  Questions asked to a participant associated with a particular credit, where the credit is associated with a plan. Can impact credit amounts.\n  * `standaloneCreditsAndSurcharges` - Questions asked to a participant associated with a particular credit, where the credit is not associated with a plan, but is a standalone credit. Can impact credit amounts.\n  * `inPlanNoAmountEligibility` - Questions asked to a participant associated with a particular plan. Does not change plan pricing but can impact eligibility of that plan such as available options.\n  * `inPlanPricingVariation` - Questions asked to a participant associated with a particular plan. The response can change plan pricing.\n  * `standalonePlanNoAmount` - Questions asked to a participant not associated with a particular plan. \n  * `declineCoverageReason` - Question asked to the participant when they are declining coverage for a plan.\n  * `healthSavingsAccountAffirmation` - Question when enrolling into an HSA plan.\n  * `healthSavingsAccountEligibility` - Question when enrolling into an HSA plan to confirm participant eligibility. \n  * `healthSavingsAccountAcceleratedContributionIndicator` - Question asking if the participant would like to accelerate their HSA contributions.\n  * `healthSavingsAccountAcceleratedContributionAmount` - The amount of contributions to be accelerated.\n  * `healthSavingsAccountElectronicConsent ` - A question capturing the consent of starting an HSA account for the HSA plan election page.\n  * `tobaccoStatus` - A question trying to determine the tobacco usage.\n  * `questionnaireAffirmation` - A questionnaire capturing participant affirmation.\n  * `flexibleSpendingAccountAffirmation ` - Question when enrolling into an FSA plan.\n  * `termsAndConditions ` - When a user must respond to terms and conditions text.\n",
            "example": "inPlanCreditsAndSurcharges"
          },
          "creditsAndSurchargesId": {
            "type": "string",
            "description": "Reference identifier object for a credit or surcharge. This would be populated when the questionnairesType is credit related.",
            "example": "1000"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_questions"
            }
          }
        },
        "description": "A grouping of Questions and Answers"
      },
      "pendingElectionsResponse_coverages": {
        "required": [
          "adjustedFrequencyType",
          "coverageBeginDate",
          "coverageEndDate",
          "electionStatus",
          "electionType",
          "employeeAdjustedPostTaxPrice",
          "employeeAdjustedPostTaxTotalNetPrice",
          "employeeAdjustedPostTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAdjustedPreTaxPrice",
          "employeeAdjustedPreTaxTotalNetPrice",
          "employeeAdjustedPreTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAdjustedPrice",
          "employeeAdjustedTotalNetPrice",
          "employeeAdjustedTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPostTaxPrice",
          "employeeAnnualPostTaxTotalNetPrice",
          "employeeAnnualPostTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPreTaxPrice",
          "employeeAnnualPreTaxTotalNetPrice",
          "employeeAnnualPreTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPrice",
          "employeeAnnualTotalNetPrice",
          "employeeAnnualTotalPriceMinusPlanEmployerSubsidy",
          "planDescription",
          "planId",
          "planMaintenanceAction",
          "planSequence",
          "planSummary",
          "planType",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "electionType": {
            "type": "string",
            "description": "Defines the layout of the election page, and how the user should enroll into the benefit.\n  * `clientDefinedData`\n  * `coverageIncrementElectedPrice`\n  * `coverageRangeElectedPrice`\n  * `coverageRangeElectedResponseCodePrice`\n  * `creditByCoverageCategory`\n  * `creditByCoverageCategory`\n  * `creditByOption`\n  * `creditByOptionAndCoverageCategory`\n  * `creditByOptionCoverageCategoryAnswer`\n  * `healthReimbursementAccountPlan`\n  * `healthSavingsAccountMultipleContributionAnnual`\n  * `healthSavingsAccountMultipleContributionAnnualAndAdjusted`\n  * `healthSavingsAccountSingleContributionAnnual`\n  * `healthSavingsAccountSingleContributionAnnualAndAdjusted`\n  * `mandatoryOptionCoverageAmountDisplayedNoPrice`\n  * `mandatoryOptionPrice`\n  * `multipleCreditAnswerRequired`\n  * `optionCoverageAmountDisplayedResponseCodePrice`\n  * `optionCoverageAmountDisplayedResponseCodeTwoPrice`\n  * `optionCoverageCategoryCoverageAmountDisplayedPrice`\n  * `optionCoverageCategoryCoverageAmountNotDisplayedPrice`\n  * `optionCoverageCategoryCoverageRangePrice`\n  * `optionCoverageCategoryPrice`\n  * `optionCoverageCategoryPriceTax`\n  * `optionCoverageCategoryResponseCode`\n  * `optionCoveragePrice`\n  * `optionCoverageRangeElectedPrice`\n  * `optionNoPrice`\n  * `optionNoPriceTax`\n  * `optionPrice`\n  * `optionResponseCodeTwoPrice`\n  * `standaloneCredit`\n  * `standaloneCreditByAnswer`\n  * `spendingAccountOneSource`\n  * `spendingAccountTwoSource`\n  * `textOnly`\n  * `twoPlanSplitElection`\n  * `twoPlanSplitElection`\n  * `twoPlanSplitElectionWithResponse`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "optionCoverageCategoryPrice"
          },
          "electionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n",
            "example": "unconfirmedElection"
          },
          "transactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan. This can be used later in the enrollment flow for PUT requests.",
            "example": "3500"
          },
          "planId": {
            "type": "string",
            "description": "The identifier associated with this Plan.",
            "example": "3500"
          },
          "planDescription": {
            "type": "string",
            "description": "This is an external description associated with the planId. This field is customized by client and is displayed to the participant. This field will be translated into other supported languages.",
            "example": "Active Medical"
          },
          "planSummary": {
            "type": "string",
            "description": "An enumeration of the major type of this plan. This helps describe the plan being presented.\n  * `disability`\n  * `excess`\n  * `flexibleSpendingAccount`\n  * `healthCare`\n  * `lifeAndAccidentalDeath`\n  * `other`\n  * `savingsAccount`\n  * `standaloneCredit`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "health"
          },
          "planType": {
            "type": "string",
            "description": "An enumeration of the minor type (subtype) of this plan. This is a more detailed description of the plan being presented.\n  * `accidentInsurance`\n  * `adoptionAssistance`\n  * `commuterExpenseFlexibleSpendingAccount`\n  * `criticalIllness`\n  * `dental`\n  * `dependentAccidentalDeathAndDismemberment`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentLife`\n  * `dependentLifeAccidentalDeathAndDismemberment`\n  * `employeAssistanceProgram`\n  * `employeeAccidentalDeathAndDismemberment`\n  * `employeeBasicLifeAndAccidentalDeathAndDismemberment`\n  * `employeeLife`\n  * `employeeLongTermCare`\n  * `excessCreditsForfeiture`\n  * `excessCreditsToCash`\n  * `excessCreditsToHealthcareFlexibleSpendingAccount`\n  * `familyAccidentalDeathAndDismemberment`\n  * `familyLife`\n  * `familyLifeAndAccidentalDeathAndDismemberment`\n  * `financialPlanning`\n  * `healthCareFlexibleSpendingAccount`\n  * `healthReimbursementAccount`\n  * `healthRiskQuestionnaire` \n  * `healthSavingsAccount`\n  * `hospitalIndemnity`\n  * `identityTheft`\n  * `legal`\n  * `longTermDisability`\n  * `medical`\n  * `medicalMedicare`\n  * `otherFlexibleSpendingAccount`\n  * `pension`\n  * `prePaidLegal`\n  * `prescriptionDrug`\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseLongTermCare`\n  * `standaloneQuestionnaire`\n  * `standaloneTobaccoStatus`\n  * `stockPurchasePlan`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSelling`\n  * `vision`\n  * `voluntaryBenefitsExchange`\n  * `wellnessCredit`\n  * `other`\n  * `custom`- This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "medical"
          },
          "coverageBeginDate": {
            "type": "string",
            "description": "Coverage begin date; this date is unique to the plan and the event, and can vary from plan to plan.  For example, Medical can start on 2018-01-01, but Basic Life may start 6 months later, on 2018-06-01.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "coverageEndDate": {
            "type": "string",
            "description": "Coverage end date; this date will be equal to the plan year end date, unless otherwise specified.",
            "format": "date",
            "example": "2018-12-31T00:00:00"
          },
          "adjustedFrequencyType": {
            "type": "string",
            "description": "The factor by which the adjusted pricing amount appears as.\n  * `annual` - Annual adjusted price.\n  * `monthly` - Monthly adjusted price.\n  * `semiMonthly` - Semi-monthly adjusted price.\n  * `payPeriod` - Pay Period adjusted price.\n  * `quarterly` - Quarterly adjusted price.\n  * `weekly` - Weekly adjusted price.\n  * `biweekly` - Bi-weekly adjusted price.\n  * `notApplicable` - Adjusted frequency type not applicable.\n",
            "example": "payPeriod"
          },
          "employeeAdjustedPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted price for an option. It does not reflect any employer subsidy, credits, and excludes any surcharges. It includes the extra 2% for COBRA participants. (EE Price/Frequency)",
            "format": "double",
            "example": 100.01
          },
          "employeeAnnualPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual price for an option. It does not reflect any employer subsidy, credits, and excludes any surcharges. It includes the extra 2% for COBRA participants. (EE Price)",
            "format": "double",
            "example": 1200.12
          },
          "employeeAdjustedPreTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted pre-tax price for an option. It does not reflect any employer subsidy,  credits, and excludes any surcharges. It includes the extra 2% for COBRA participants. (EE Pre-Tax Price/Frequency)",
            "format": "double",
            "example": 100.01
          },
          "employeeAnnualPreTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual pre-tax price for an option. It does not reflect any employer subsidy, credits, and excludes any surcharges. It includes the extra 2% for COBRA participants. (EE Pre-Tax Price)",
            "format": "double",
            "example": 1200.12
          },
          "employeeAdjustedPostTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted post-tax price for an option. It does not reflect any employer subsidy,  credits, and excludes any surcharges. It includes the extra 2%  for COBRA participants. (EE Post-Tax Price/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualPostTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual post-tax price for an option. It does not reflect any employer subsidy, credits, and excludes any surcharges. It includes the extra 2% for COBRA participants. (EE Post-Tax Price)",
            "format": "double",
            "example": 0.0
          },
          "employeeAdjustedTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits and is calculated as a sum of rounded component fields. (EE Price/Frequency - Plan Based Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPreTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted pre-tax price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits. (EE Pre-Tax Price/Frequency - Plan Based Pre-Tax Credits /Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPostTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted post-tax price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits and is calculated as a sum of rounded component fields. (EE Post-Tax Price/Frequency - Plan Based Post-Tax Credits/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits. (EE Price - Plan Based Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPreTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual pre-tax price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits. (EE Pre-Tax Price - Plan Based Pre-Tax Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPostTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual post-tax price amount for an option less any employer subsidy. It excludes any additional plan credits, additional surcharges, and HRQ credits. (EE Post-Tax Price - Plan Based Post-Tax Credits)",
            "format": "double",
            "example": 0.0
          },
          "employeeAdjustedTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted total net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges and is calculated as a   sum of rounded component fields. (EE Price/Frequency + Surcharges/Frequency - Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPreTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted pre-tax total net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges and is calculated  as a sum of rounded component fields. (EE Pre-Tax Price/Frequency\n + PreTax Surcharges/Frequency - Pre-Tax Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPostTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted post-tax total net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges and is calculated  as a sum of rounded component fields. (EE Post-Tax Price/Frequency  + Post Tax Surcharges/Frequency - Post Tax Credits/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual total net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges. (EE Price + Surcharges - Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPreTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual total pre-tax net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges. (EE Pre-Tax Price\n + Pre-Tax Surcharges - Pre-Tax Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPostTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual total post-tax net price amount for an option. It reflects any employer subsidy, credits, and includes any surcharges. (EE Post-Tax  Price + Post-Tax Surcharges - Post-Tax Credits)",
            "format": "double",
            "example": 0.0
          },
          "totalActualCoverageAmount": {
            "type": "number",
            "description": "The coverage amount offered by this option. The sum of all the coverage amounts associated with this option's BenefitAmounts.",
            "format": "double",
            "example": 0.0
          },
          "totalElectedCoverageAmount": {
            "type": "number",
            "description": "The elected coverage amount by the participant. The sum of all the elected coverage amounts associated with this option's BenefitAmounts.",
            "format": "double",
            "example": 0.0
          },
          "planSummaryTaxCode": {
            "type": "string",
            "description": "The tax code associated with the Plan. A more detailed tax code can be found under option[] for 'either'.\n  * `postTax` - Post-Tax plan pricing.\n  * `preTax` - Pre-Tax plan pricing.\n  * `both` - Both Post-Tax and Pre-Tax pricing apply. Tax value can be found in deeper plan type array. May be participant electable.\n  * `notApplicable` - No tax applicable.\n  * `preTax401k` - Pre-Tax plan pricing, 401k plan.\n  * `split` - Split Post-Tax and Pre-Tax pricing apply. \n",
            "example": "preTax"
          },
          "planSequence": {
            "type": "integer",
            "description": "The sequence of the plan used for a display sort order.",
            "format": "int32",
            "example": 10
          },
          "planMaintenanceAction": {
            "type": "string",
            "description": "Determines if this Plan is eligible for elections and what type of action can be taken on the election page.\n  * `suppress` - No maintenance can be performed on the plan.\n  * `viewOnly` - The plan can be viewed, but no updates can be made.\n  * `viewAndChange` - The plan can be viewed and elections can be made.",
            "example": "viewAndChange"
          },
          "option": {
            "$ref": "#/components/schemas/pendingElectionsResponse_option"
          },
          "relationshipCoverages": {
            "$ref": "#/components/schemas/pendingElectionsResponse_relationshipCoverages"
          },
          "accountPlan": {
            "$ref": "#/components/schemas/pendingElectionsResponse_accountPlan"
          },
          "creditsAndSurcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_creditsAndSurcharges"
            }
          },
          "questionnaires": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pendingElectionsResponse_questionnaires"
            }
          },
          "footnotes": {
            "$ref": "#/components/schemas/footnotes"
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          },
          "enrollmentMessages": {
            "$ref": "#/components/schemas/enrollmentMessages"
          },
          "tipsAndAlerts": {
            "$ref": "#/components/schemas/tipsAndAlerts"
          }
        },
        "description": "Coverage information."
      },
      "pendingElectionsResponse_dependents": {
        "required": [
          "birthDate",
          "dependentPersonInternalId",
          "firstName",
          "gender",
          "lastName",
          "middleName",
          "relationshipCode",
          "relationshipDescription",
          "relationshipType",
          "suffix"
        ],
        "type": "object",
        "properties": {
          "dependentPersonInternalId": {
            "type": "string",
            "example": "123456789"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "Identifies the relation of the Dependent to the Participant. The description presented to the participant.",
            "example": "Child"
          },
          "relationshipType": {
            "type": "string",
            "description": "A value that can be used for logical checks for the relationship.\n  * `TO BE DETERMINED`\n  * `child`\n  * `spouse`\n  * `other`",
            "example": "child"
          },
          "relationshipCode": {
            "type": "string",
            "description": "A code associated with this relationship that can be used for client specific logic.",
            "example": "C"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the Dependent.",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the Dependent.",
            "example": "Jacob"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the Dependent.",
            "example": "Doe"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix of the Dependent. Comes across as entered by the participant.",
            "example": "IV"
          },
          "birthDate": {
            "type": "string",
            "description": "Birth Date of the Dependent. ISO 8601 date format.",
            "format": "date",
            "example": "2016-11-02T00:00:00"
          },
          "gender": {
            "type": "string",
            "description": "The gender type that can be used for logic checks.\n  * `TO BE DETERMINED`\n  * `male`\n  * `female`\n",
            "example": "male"
          }
        },
        "description": "Provides the Participant's Dependent information."
      },
      "availableOptionsResponse_benefitAmounts": {
        "required": [
          "benefitAmountsCoverageId",
          "benefitAmountsDescription"
        ],
        "type": "object",
        "properties": {
          "benefitAmountsCoverageId": {
            "type": "string",
            "description": "The identifier associated with this benefit amount coverage values.",
            "example": "3502"
          },
          "benefitAmountsDescription": {
            "type": "string",
            "description": "The description associated with this benefit amount coverage values.",
            "example": "Aetna"
          },
          "minimumCoverageAmount": {
            "type": "number",
            "description": "The minimum election allowed for this benefit amount.",
            "format": "double",
            "example": 1000.0
          },
          "maximumCoverageAmount": {
            "type": "number",
            "description": "The maximum election allowed for this benefit amount without an approval.",
            "format": "double",
            "example": 100000.0
          },
          "maximumCoverageAmountAfterApproval": {
            "type": "number",
            "description": "The maximum election allowed for this benefit amount with an approval.",
            "format": "double",
            "example": 150000.0
          },
          "coverageAmount": {
            "type": "number",
            "description": "The coverage amount offered by this option.   Example - Life insurance plan with $50,000 coverage.  This is a numeric field representing a dollar amount. Not usually used in conjunction with increments or min/max amounts.",
            "format": "double",
            "example": 0.0
          },
          "coveragePriceAmount": {
            "type": "number",
            "description": "For non increment type benefit amounts, this is the cost of this benefit amount.",
            "format": "double",
            "example": 21.12
          },
          "incrementType": {
            "type": "string",
            "description": "Type specifying what the increment amounts relating to this structure represent.\n  * `days`\n  * `dollars`\n  * `weeks`\n  * `hours`\n  * `custom`- This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "days"
          },
          "coverageIncrementAmount": {
            "type": "number",
            "description": "The valid increment amount for this benefit amount. Elections can only be taken in these valid increments.",
            "format": "double",
            "example": 1.0
          },
          "coverageAnnualIncrementRateAmount": {
            "type": "number",
            "description": "This is a numeric field representing the cost per increment quantity elected by the participant.",
            "format": "double",
            "example": 12.0
          },
          "coverageAdjustedIncrementRateAmount": {
            "type": "number",
            "description": "This is a numeric field representing the cost per increment quantity elected by the participant. This is the prorated cost by adjustedFrequencyType.",
            "format": "double",
            "example": 1.0
          },
          "benefitAmountsPendingApprovalSummary": {
            "type": "string",
            "description": "The reason code as to why approval is needed for coverage in this Plan. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `evidenceOfInsurability` - Evidence of insurability (EOI) form.\n  * `dependentVerification` - Dependent verification request.\n  * `medicareAdvantageDisenrollment ` - Medicare Advantage Disenrollment form.\n  * `medicareAdvantageEnrollment ` - Medicare Advantage Enrollment form.\n  * `hsaTurnaround` - HSA turnaround form for bank.\n",
            "example": "evidenceOfInsurability"
          },
          "benefitAmountsPendingApprovalType": {
            "type": "string",
            "description": "This field indicates if the pending approval is at the option, coverage amount, or coverage category level. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `dependent` - Dependent based approval.\n  * `option` - Option based approval.\n  * `coverage` - Coverage based approval.\n  * `coverageCategory` - Coverage Category based approval.\n  * `optionCoverage` - Option and Coverage Category based approval.\n  * `custom` - Custom based approval. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "coverage"
          },
          "benefitAmountsPendingApprovalReferenceId": {
            "type": "string",
            "description": "The approval identifier associated approval business process.",
            "example": ""
          },
          "answersValue": {
            "type": "string",
            "description": "This is the system value for an answer. This value is the raw system value.",
            "example": "S"
          }
        },
        "description": "Benefit Amount level Coverage information for the Participant's Option."
      },
      "availableOptionsResponse_sideFund": {
        "required": [
          "maximumSideFundAmount",
          "minimumSideFundAmount",
          "sideFundIncrementAmount"
        ],
        "type": "object",
        "properties": {
          "minimumSideFundAmount": {
            "type": "number",
            "description": "The minimum election allowed for a side fund coverage.",
            "format": "double",
            "example": 0.0
          },
          "maximumSideFundAmount": {
            "type": "number",
            "description": "The maximum election allowed for a side fund coverage.",
            "format": "double",
            "example": 0.0
          },
          "sideFundIncrementAmount": {
            "type": "number",
            "description": "The valid increment amount for this side fund. Elections can only be taken in these valid increments.",
            "format": "double",
            "example": 0.0
          }
        },
        "description": "Side Fund level Coverage information for the Participant's Option."
      },
      "availableOptionsResponse_coverageCategoryAmounts": {
        "required": [
          "employeeAdjustedPostTaxTotalNetPrice",
          "employeeAdjustedPostTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAdjustedPreTaxTotalNetPrice",
          "employeeAdjustedPreTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAdjustedPrice",
          "employeeAdjustedTotalNetPrice",
          "employeeAdjustedTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPostTaxTotalNetPrice",
          "employeeAnnualPostTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPreTaxTotalNetPrice",
          "employeeAnnualPreTaxTotalPriceMinusPlanEmployerSubsidy",
          "employeeAnnualPrice",
          "employeeAnnualTotalNetPrice",
          "employeeAnnualTotalPriceMinusPlanEmployerSubsidy"
        ],
        "type": "object",
        "properties": {
          "answersValue": {
            "type": "string",
            "description": "This is the system value for an answer. This value is the raw system value.",
            "example": "S"
          },
          "employeeAdjustedPrice": {
            "type": "number",
            "description": "This is a numeric field representing the  adjusted price for an option. It does not  reflect any employer subsidy, credits, and excludes any surcharges. It includes the extra  2% for COBRA participants. (EE Price/Frequency)",
            "format": "double",
            "example": 100.01
          },
          "employeeAnnualPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual  price for an option. It does not reflect any  employer subsidy, credits, and excludes any  surcharges. It includes the extra 2% for COBRA participants. (EE Price)",
            "format": "double",
            "example": 1200.12
          },
          "employeeAdjustedPreTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the  adjusted pre-tax price for an option. It does  not reflect any employer subsidy, credits, and  excludes any surcharges. It includes the extra  2% for COBRA participants.  (EE Pre-Tax Price/Frequency)",
            "format": "double",
            "example": 100.01
          },
          "employeeAnnualPreTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the  annual pre-tax price for an option. It does  not reflect any employer subsidy, credits, and excludes any surcharges.  It includes the extra 2% for COBRA participants. (EE Pre-Tax Price)",
            "format": "double",
            "example": 1200.12
          },
          "employeeAdjustedPostTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the  adjusted post-tax price for an option. It does  not reflect any employer subsidy, credits, and  excludes any surcharges. It includes the extra 2%  for COBRA participants. (EE Post-Tax Price/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualPostTaxPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual  post-tax price for an option. It does not reflect  any employer subsidy, credits, and excludes any  surcharges. It includes the extra 2% for COBRA participants. (EE Post-Tax Price)",
            "format": "double",
            "example": 0.0
          },
          "employeeAdjustedTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  price amount for an option less any employer  subsidy. It excludes any additional plan credits,  additional surcharges, and HRQ credits and is  calculated as a sum of rounded component fields. (EE Price/Frequency - Plan Based Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPreTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  pre-tax price amount for an option less any  employer subsidy. It excludes any additional  plan credits, additional surcharges, and HRQ  credits. (EE Pre-Tax Price/Frequency - Plan  Based Pre-Tax Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPostTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  post-tax price amount for an option less any  employer subsidy. It excludes any additional  plan credits, additional surcharges, and HRQ  credits and is calculated as a sum of rounded  component fields. (EE Post-Tax Price/Frequency -  Plan Based Post-Tax Credits/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual  price amount for an option less any employer  subsidy. It excludes any additional plan credits,  additional surcharges, and HRQ credits.  (EE Price - Plan Based Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPreTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual  pre-tax price amount for an option less any employer  subsidy. It excludes any additional plan credits,  additional surcharges, and HRQ credits.  (EE Pre-Tax Price - Plan Based Pre-Tax Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPostTaxTotalPriceMinusPlanEmployerSubsidy": {
            "type": "number",
            "description": "This is a numeric field representing the annual  post-tax price amount for an option less any  employer subsidy. It excludes any additional  plan credits, additional surcharges, and HRQ credits. (EE Post-Tax Price - Plan Based Post-Tax Credits)",
            "format": "double",
            "example": 0.0
          },
          "employeeAdjustedTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  total net price amount for an option. It reflects  any employer subsidy, credits, and includes any  surcharges and is calculated as a sum of rounded  component fields. (EE Price/Frequency + Surcharges/Frequency - Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPreTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  pre-tax total net price amount for an option. It  reflects any employer subsidy, credits, and includes  any surcharges and is calculated as a sum of rounded  component fields. (EE Pre-Tax Price/Frequency\n + PreTax Surcharges/Frequency - Pre-Tax Credits/Frequency)",
            "format": "double",
            "example": 90.01
          },
          "employeeAdjustedPostTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the adjusted  post-tax total net price amount for an option. It  reflects any employer subsidy, credits, and includes  any surcharges and is calculated as a sum of rounded  component fields. (EE Post-Tax Price/Frequency  + Post Tax Surcharges/Frequency -  Post Tax Credits/Frequency)",
            "format": "double",
            "example": 0.0
          },
          "employeeAnnualTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual  total net price amount for an option. It  reflects any employer subsidy, credits, and  includes any surcharges.  (EE Price + Surcharges - Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPreTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual  total pre-tax net price amount for an option.  It reflects any employer subsidy, credits, and  includes any surcharges. (EE Pre-Tax Price\n + Pre-Tax Surcharges - Pre-Tax Credits)",
            "format": "double",
            "example": 1080.12
          },
          "employeeAnnualPostTaxTotalNetPrice": {
            "type": "number",
            "description": "This is a numeric field representing the annual  total post-tax net price amount for an option.  It reflects any employer subsidy, credits, and  includes any surcharges. (EE Post-Tax  Price + Post-Tax Surcharges - Post-Tax Credits)",
            "format": "double",
            "example": 0.0
          }
        },
        "description": "Prices with corresponding answers if applicable. "
      },
      "availableOptionsResponse_optionCoverageCategories": {
        "required": [
          "coverageCategoryId"
        ],
        "type": "object",
        "properties": {
          "coverageCategoryId": {
            "type": "string",
            "description": "The identifier associated with the Option.",
            "example": "30"
          },
          "coverageCategoriesPendingApprovalSummary": {
            "type": "string",
            "description": "The reason code as to why approval is needed for coverage in this Plan. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `evidenceOfInsurability` - Evidence of insurability (EOI) form.\n  * `dependentVerification` - Dependent verification request.\n  * `medicareAdvantageDisenrollment ` - Medicare Advantage Disenrollment form.\n  * `medicareAdvantageEnrollment ` - Medicare Advantage Enrollment form.\n  * `hsaTurnaround` - HSA turnaround form for bank.\n",
            "example": "evidenceOfInsurability"
          },
          "coverageCategoriesPendingApprovalType": {
            "type": "string",
            "description": "This field indicates if the pending approval is at the option, coverage amount, or coverage category level. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `dependent` - Dependent based approval.\n  * `option` - Option based approval.\n  * `coverage` - Coverage based approval.\n  * `coverageCategory` - Coverage Category based approval.\n  * `optionCoverage` - Option and Coverage Category based approval.\n  * `custom` - Custom based approval. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "coverageCategory"
          },
          "coverageCategoriesPendingApprovalReferenceId": {
            "type": "string",
            "description": "The approval identifier associated approval business process.",
            "example": ""
          },
          "coverageCategoryAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_coverageCategoryAmounts"
            }
          }
        },
        "description": "Coverage categories and their prices. NOTE: Not all options will have the same number of coverage categories."
      },
      "availableOptionsResponse_optionDesignAttributes_designAttributes": {
        "type": "object",
        "properties": {
          "individualOutOfPocketMaximumAmount": {
            "type": "string",
            "description": "Represents individual out of pocket maximum.",
            "example": "2000"
          },
          "individualOutOfPocketMaximumAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the individualOutOfPocketMaximumAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "familyOutOfPocketMaximumAmount": {
            "type": "string",
            "description": "Represents the family out of pocket maximum.",
            "example": "5000"
          },
          "familyOutOfPocketMaximumAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the familyOutOfPocketMaximumAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "individualAnnualDeductibleAmount": {
            "type": "string",
            "description": "Represents individual annual deductible.",
            "example": "1000"
          },
          "individualAnnualDeductibleAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the individualAnnualDeductibleAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "familyAnnualDeductibleAmount": {
            "type": "string",
            "description": "Represents the family out of pocket maximum.",
            "example": "3000"
          },
          "familyAnnualDeductibleAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the familyAnnualDeductibleAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "coinsurancePercentage": {
            "type": "string",
            "description": "Represents the coinsurance attribute. This comes across as a number with 2 digits beyond the decimal.",
            "example": "20"
          },
          "coinsurancePercentageFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the coinsurancePercentage field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "percent"
          },
          "primaryVisitCopayAmount": {
            "type": "string",
            "description": "Represents primary visit attribute.",
            "example": "20"
          },
          "primaryVisitCopayAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the primaryVisitCopayAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "specialistVisitCopayAmount": {
            "type": "string",
            "description": "Represents specialist visit attribute.",
            "example": "20"
          },
          "specialistVisitCopayAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the specialistVisitCopayAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "hospitalCopayAmount": {
            "type": "string",
            "description": "Represents the hospital copay attribute.",
            "example": "200"
          },
          "hospitalCopayAmountFieldType": {
            "type": "string",
            "description": "Represents what type of data is found in the hospitalCopayAmount field.\n  * `money` - Numeric dollar amount.\n  * `percent` - Percentage, a number with 2 digits beyond the decimal.\n  * `text` - String/Text.\n",
            "example": "money"
          },
          "retailGenericCoverageDescription": {
            "type": "string",
            "description": "Represents retail generic which is information in regards to retail generic prescription drug cost.",
            "example": "75% covered; Participant pays 25%; deductible does not apply."
          },
          "retailFormularyBrandCoverageDescription": {
            "type": "string",
            "description": "Represents the formulary brand which is information in regards to retail brand prescription drug cost.",
            "example": "70% covered; Participant pays 30%; deductible does not apply."
          },
          "retailNonformularyBrandCoverageDescription": {
            "type": "string",
            "description": "Represents retail non-formulary brand which is information in regards to retail non-formulary prescription drug cost.",
            "example": "50% covered; Participant pays 50%; deductible does not apply."
          },
          "savingsAccountPlanType": {
            "type": "string",
            "description": "Represents the type of savings account plan is associated with this option if one is present.\n  * `healthSavingsAccount`\n  * `healthReimbursementAccount`",
            "example": "healthSavingsAccount"
          },
          "benefitLevelType": {
            "type": "string",
            "description": "Defines the benefit level that applies to the design attributes and option.\n  * `inNetwork`",
            "example": "inNetwork"
          }
        },
        "description": "Plan design attributes for this option."
      },
      "availableOptionsResponse_optionDesignAttributes_additionalOptionDesignAttributes": {
        "required": [
          "additionalAttributesBenefitLevelText",
          "additionalAttributesId",
          "additionalAttributesSummaryType",
          "additionalAttributesText",
          "additionalAttributesTitleText"
        ],
        "type": "object",
        "properties": {
          "additionalAttributesId": {
            "type": "string",
            "description": "An identifier for the additional attributes being displayed.",
            "example": "85"
          },
          "additionalAttributesSummaryType": {
            "type": "string",
            "description": "Identifies where this additional attributes field would be displayed.\n  * `prescription`\n  * `coverage`",
            "example": "prescription"
          },
          "additionalAttributesTitleText": {
            "type": "string",
            "description": "The title text for the additional attributes. For example, Retail Specialty.",
            "example": "prescription"
          },
          "additionalAttributesBenefitLevelText": {
            "type": "string",
            "description": "Defines the benefit level, such as In Network/Out of Network.",
            "example": "In Network"
          },
          "additionalAttributesText": {
            "type": "string",
            "description": "The text for the additional attributes for plan design to be displayed along with the title and level text.",
            "example": "70% of eligible expenses after deductible is met; 30 day supply"
          }
        },
        "description": "An array with additional design attributes information to display to the participant."
      },
      "availableOptionsResponse_optionDesignAttributes": {
        "type": "object",
        "properties": {
          "compositePlanDesignId": {
            "type": "string",
            "description": "An identifier used for the plan design of the option. This field can be used later to fetch information for tools such as the Health Plan Comparison Chart (HPCC).",
            "example": "575123"
          },
          "designAttributes": {
            "$ref": "#/components/schemas/availableOptionsResponse_optionDesignAttributes_designAttributes"
          },
          "additionalOptionDesignAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_optionDesignAttributes_additionalOptionDesignAttributes"
            }
          },
          "footnotes": {
            "$ref": "#/components/schemas/footnotes"
          }
        },
        "description": "Option design attributes typically returned for health plans that help define option coverage details. N/A can be a valid return value for option design data."
      },
      "availableOptionsResponse_options": {
        "required": [
          "isThisParticipantsCurrentOption",
          "optionsDescription",
          "optionsId"
        ],
        "type": "object",
        "properties": {
          "optionsId": {
            "type": "string",
            "description": "The identifier associated with the Option.",
            "example": "30"
          },
          "optionsType": {
            "type": "string",
            "description": "This is a static code that is used to identify what type of plan design product the actual option id is. This field is used as an internal category and isn't meant to be presented to the user. This field will not be translated into other languages.\n  * `accident`\n  * `adoptionAssistance`\n  * `childBasicLife`\n  * `childSupplementalLife`\n  * `commuterExpenseFlexibleSpendingAccount`\n  * `indemnity`\n  * `pointOfService`\n  * `preferredProviderOrganization`\n  * `healthMaintenanceOrganization`\n  * `criticalIllness`\n  * `dental`\n  * `dentalHealthMaintenanceOrganization`\n  * `dentalIndemnity`\n  * `dependentBasicLife`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentSupplementalLife`\n  * `employeeAssistanceProgram`\n  * `employeeBasicLife`\n  * `employeeLongTermCare`\n  * `employeeSupplementalLife`\n  * `exclusiveProviderOrganization`\n  * `exclusiveProviderOrganizationHmo`\n  * `exclusiveProviderOrganizationIndemnity`\n  * `exclusiveProviderOrganizationPpo`\n  * `familyBasicLife`\n  * `familySupplementalLife`\n  * `financialPlan`\n  * `groupLegal`\n  * `healthcareFlexibleSpendingAccount`\n  * `healthReimbursementAccount\n  * `healthSavingsAccountFamily`\n  * `healthSavingsAccountIndividual\n  * `hearing`\n  * `hospital`\n  * `identityTheft`\n  * `invalid`\n  * `longTermDisability`\n  * `medical`\n  * `mixed`\n  * `noCoverage`\n  * `other`\n  * `otherFlexibleSpendingAccount`\n  * `prepaidLegal`\n  * `prescriptionDrug`\n  * `retireeBasic`\n  * `retireeSupplemental`\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseBasicLife`\n  * `spouseLongTermCare`\n  * `spouseSupplementalLife`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSell`\n  * `vision`\n  * `wellnessCredit`\n  * `custom`- This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "PPO"
          },
          "optionsDescription": {
            "type": "string",
            "description": "The description of the Option.",
            "example": "Aetna PPO"
          },
          "isThisParticipantsCurrentOption": {
            "type": "boolean",
            "description": "Boolean determining if this option in the array is the participant's current option.",
            "example": true
          },
          "primaryCareProviderDesignationType": {
            "type": "string",
            "description": "This field indicates if the option has in network provider details and whether the option requires a primaryCareProvider election for newly covered family members or just provides a primaryCareProvider lookup. \n  * `providerLookupOnly` - Allows a look up to see if providers are in network.\n  * `providerElection` - Allows for provider elections.\n  * `notApplicable` - Provider designation does not apply.\n",
            "example": "providerLookupOnly"
          },
          "primaryCareProviderNetworkId": {
            "type": "string",
            "description": "The identifier associated with the network.",
            "example": "3707"
          },
          "savingsAccountPlanChoiceId": {
            "type": "string",
            "description": "Savings Account ID, or Health Savings Account, tied to this option. This would only ever be populated for a Medical plan if a Health Savings Account is applicable to this option. This will be tied to the account plan value to match to a savings account plan.",
            "example": "120"
          },
          "pendingApprovalSummary": {
            "type": "string",
            "description": "The reason code as to why approval is needed for coverage in this Plan. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `evidenceOfInsurability` - Evidence of insurability (EOI) form.\n  * `dependentVerification` - Dependent verification request.\n  * `medicareAdvantageDisenrollment ` - Medicare Advantage Disenrollment form.\n  * `medicareAdvantageEnrollment ` - Medicare Advantage Enrollment form.\n  * `hsaTurnaround` - HSA turnaround form for bank.\n",
            "example": "evidenceOfInsurability"
          },
          "pendingApprovalType": {
            "type": "string",
            "description": "This field indicates if the pending approval is at the option, coverage amount, or coverage category level. Can be tied to enrollmentMessages.enrollmentMessageSummary for additional enrollment messaging text if present.\n  * `dependent` - Dependent based approval.\n  * `option` - Option based approval.\n  * `coverage` - Coverage based approval.\n  * `coverageCategory` - Coverage Category based approval.\n  * `optionCoverage` - Option and Coverage Category based approval.\n  * `custom` - Custom based approval. This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "option"
          },
          "pendingApprovalReferenceId": {
            "type": "string",
            "description": "The approval identifier associated approval business process.",
            "example": ""
          },
          "benefitAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_benefitAmounts"
            }
          },
          "sideFund": {
            "$ref": "#/components/schemas/availableOptionsResponse_sideFund"
          },
          "optionCoverageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_optionCoverageCategories"
            }
          },
          "optionDesignAttributes": {
            "$ref": "#/components/schemas/availableOptionsResponse_optionDesignAttributes"
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          }
        },
        "description": "Option choice type information."
      },
      "availableOptionsResponse_accountPlan_contributionSources": {
        "required": [
          "contributionDisplaySequence",
          "contributionSourcesDescription",
          "contributionSourcesId",
          "maximumSourceAmount",
          "minimumSourceAmount",
          "remainingContributionPeriods",
          "totalAnnualContributionPeriods",
          "validElectionIncrementAmount"
        ],
        "type": "object",
        "properties": {
          "contributionSourcesId": {
            "type": "string",
            "description": "Reference identifier object for a contribution source.",
            "example": "20"
          },
          "contributionDisplaySequence": {
            "type": "integer",
            "description": "The sequence the source should be presented in. This can be a decimal number.",
            "format": "int32",
            "example": 10
          },
          "totalAnnualContributionPeriods": {
            "type": "integer",
            "description": "The amount of payperiods a participant has throughout the year. For a participant paid weekly this will return 52.",
            "format": "int32",
            "example": 52
          },
          "remainingContributionPeriods": {
            "type": "integer",
            "description": "The remaining periods where a contribution is taken from a participant. How many pay periods are left within the plan year.",
            "format": "int32",
            "example": 26
          },
          "electionContributionFrequency": {
            "type": "string",
            "description": "The frequency of the contribution being elected by the participant.  \n  * `annual` - Annual adjusted contributions.\n  * `monthly` - Monthly adjusted contributions.\n  * `semiMonthly` - Semi-monthly adjusted contributions.\n  * `payPeriod` - Pay Period adjusted contributions.\n  * `quarterly` - Quarterly adjusted contributions.\n  * `weekly` - Weekly adjusted contributions.\n  * `biweekly` - Bi-weekly adjusted contributions.\n  * `notApplicable` - Contribution frequency type not applicable.\n",
            "example": "monthly"
          },
          "sourceFrequency": {
            "type": "string",
            "description": "The frequency of the source.  \n  * `annual` - Annual adjusted contributions.\n  * `monthly` - Monthly adjusted contributions.\n  * `semiMonthly` - Semi-monthly adjusted contributions.\n  * `payPeriod` - Pay Period adjusted contributions.\n  * `quarterly` - Quarterly adjusted contributions.\n  * `weekly` - Weekly adjusted contributions.\n  * `biweekly` - Bi-weekly adjusted contributions.\n  * `notApplicable` - Contribution frequency type not applicable.\n",
            "example": "monthly"
          },
          "contributionSourcesType": {
            "type": "string",
            "description": "Enumerated type specifying from who/what the contribution is funded.\n  * `employeeContribution` -Employees contributions.\n  * `employerMatch` - Employer matches amount.\n  * `employerSeed` - Employer provided amount.\n  * `excess` - Excess credits contribution source type.\n",
            "example": "employeeContribution"
          },
          "contributionSourcesTaxationType": {
            "type": "string",
            "description": "Enumerated type specifying the tax status of the contribution source.\n  * `preTax` - Pre-Tax contribution.\n  * `postTax` - Post-Tax contribution.\n",
            "example": "preTax"
          },
          "contributionSourcesDescription": {
            "type": "string",
            "description": "Readable description of the contribution source.",
            "example": "Employee Contribution"
          },
          "minimumSourceAmount": {
            "type": "number",
            "description": "This is a numeric field representing the minimum amount allowed for this source.",
            "format": "double",
            "example": 100.0
          },
          "maximumSourceAmount": {
            "type": "number",
            "description": "This is a numeric field representing the maximum amount allowed for this source. For employerSeed contributionSourceType, this is the amount that the participant gets funded by the employer.",
            "format": "double",
            "example": 3450.0
          },
          "validElectionIncrementAmount": {
            "type": "number",
            "description": "This is a numeric field representing the valid increment for the contribution source.",
            "format": "double",
            "example": 1.0
          },
          "maximumCompanyMatchPercent": {
            "type": "number",
            "description": "This is a numeric field representing a percentage for a employerMatch type source.",
            "format": "double",
            "example": 0.0
          }
        },
        "description": "Contribution Sources for the Account Plan coverage for the Participant."
      },
      "availableOptionsResponse_accountPlan": {
        "required": [
          "annualMaximumAmount",
          "annualMinimumAmount",
          "contributionSources"
        ],
        "type": "object",
        "properties": {
          "annualMinimumAmount": {
            "type": "number",
            "description": "The minimum amount that needs to be elected to have coverage. This is the combined total of all sources.",
            "format": "double",
            "example": 0.0
          },
          "annualMaximumAmount": {
            "type": "number",
            "description": "The maximum amount that needs to be elected to have coverage.This is the combined total of all sources.",
            "format": "double",
            "example": 6750.0
          },
          "vendorId": {
            "type": "string",
            "description": "The identifier of the vendor for the Account Plan.",
            "example": "3505"
          },
          "vendorType": {
            "type": "string",
            "description": "The type of the vendor for the Account Plan.  Allows for calls to certain vendors to get current balance for HSA plans if needed.\n  * `alegeus`\n  * `umb`\n  * `other`",
            "example": "alegeus"
          },
          "vendorDescription": {
            "type": "string",
            "description": "The name of the vendor for the Account Plan, the full company name.",
            "example": "Bank"
          },
          "savingsAccountPlanChoiceId": {
            "type": "string",
            "description": "Savings Account ID, or Health Savings Account, tied to this account plan. This would only ever be populated for a savings account type plan. This will be tied to the option object's value of the same name to match that option to this  account plan.",
            "example": "3505"
          },
          "estimatedTaxRate": {
            "type": "number",
            "description": "The estimated tax savings for using an savings account. This is only expected to be returned for savings account type plans. This will return a whole number value, so for 25%, 25 will be returned rather than .25.",
            "format": "double",
            "example": 25.0
          },
          "estimatedTaxSavingsAmount": {
            "type": "number",
            "description": "Using the estimated tax savings rate and the annual contribution to the employeeContribution contributionSourceType the tax savings is calculated. This is only expected to be returned for savings account type plans.",
            "format": "double",
            "example": 600.0
          },
          "isLimitedPurpose": {
            "type": "boolean",
            "description": "A boolean value denoting whether or not this spending account is limited purpose due to elections the participant has made in this enrollment activity.",
            "example": true
          },
          "contributionSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_accountPlan_contributionSources"
            }
          }
        },
        "description": "Account Plan choice information."
      },
      "availableOptionsResponse_creditAmounts": {
        "required": [
          "adjustedAmount",
          "annualAmount"
        ],
        "type": "object",
        "properties": {
          "annualAmount": {
            "type": "number",
            "description": "This is a numeric field representing the total adjusted credits a person receives. (Total Credits for the option / Frequency)",
            "format": "double",
            "example": 120.0
          },
          "adjustedAmount": {
            "type": "number",
            "description": "This is a numeric field representing the total annual credits a person receives. (Total Credits for the option)",
            "format": "double",
            "example": 10.0
          },
          "optionId": {
            "type": "string",
            "description": "Provides the source system ID for the Option this credit applies to. This would apply for the planCredit creditsAndSurchargesType. Ties to option.optionId.",
            "example": "3701"
          },
          "coverageCategoryId": {
            "type": "string",
            "description": "Provides the Coverage Category ID for the Option the participant is enrolled in. This would match to the coverageCategoryId prices from option.coveragecategory.coveragecategoryId to tie to a specific coverage category and answer if present.",
            "example": "30"
          },
          "answerValue": {
            "type": "string",
            "description": "This is the system value for an answer. This value is the raw system value.",
            "example": "S"
          }
        },
        "description": "prices with corresponding answers if applicable."
      },
      "availableOptionsResponse_creditsAndSurcharges": {
        "required": [
          "creditsAndSurchargesDescription",
          "creditsAndSurchargesId",
          "electionType",
          "isCoverageRequiredForCredit",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "creditsAndSurchargesId": {
            "type": "string",
            "description": "Reference identifier object for a credit or surcharge.",
            "example": "1000"
          },
          "transactionId": {
            "type": "string",
            "description": "The transaction identifier associated with this credit.",
            "example": "1001"
          },
          "creditsAndSurchargesDescription": {
            "type": "string",
            "description": "Long description of this credit or surcharge",
            "example": "Healthy Lifestyle Credit"
          },
          "creditsAndSurchargesLabel": {
            "type": "string",
            "description": "Short description of this credit or surcharge",
            "example": "Health Credit"
          },
          "electionType": {
            "type": "string",
            "description": "Defines the layout of the election page, and how the user should enroll into the benefit. \n  * `creditByCoverageCategory` - A credit that varies on the coverage category.\n  * `creditByOption` - A credit that varies on the option.\n  * `creditByOptionAndCoverageCategory` - A credit that varies on the option and coverage category.\n  * `creditByOptionCoverageCategoryAnswer` - A credit that varies on the option, coverage category, and resposne to a quesiton.\n  * `creditByPlan` - A credit provided on the plan level that doesnt vary on other items such as option, coverage category, or response code.\n  * `multipleCreditAnswerRequired` - A credit based on participant''s responses to multiple questions.\n  * `standaloneCredit` - A flat dollar credit not based on any other part of the business process.\n  * `standaloneCreditByAnswer` - A credit based on participant''s response to a question.\n  * `tobaccoResponseProtected` - A Tobacco type credit. Response Codes are present but limited to a single response code in plan election pages and is protected.  \n",
            "example": "creditByOptionAndCoverageCategory"
          },
          "creditsAndSurchargesType": {
            "type": "string",
            "description": "Enumerated type specifying the type of credit or surcharge.\n  * `healthRiskQuestionnaire`\n  * `inPlanQuestionCredit`\n  * `inPlanNoQuestionCredit`\n  * `inPlanQuestionSurcharge`\n  * `inPlanNoQuestionSurcharge`\n  * `planEmployerSubsidy`\n  * `standaloneQuestionCredit`\n  * `standaloneNoQuestionCredit`\n  * `standaloneQuestionSurcharge`\n",
            "example": "inPlanNoQuestionCredit"
          },
          "isCoverageRequiredForCredit": {
            "type": "boolean",
            "description": "If true, the participant needs coverage in the associated plan in order to get the credit amount applied. If the no coverage option is present and elected, then a $0.00 credit is applied. This can appear for credits that vary and do not vary based on options in the creditAmounts array.",
            "example": true
          },
          "creditAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_creditAmounts"
            }
          }
        },
        "description": "Credit and Surcharges Coverage information for the Participant."
      },
      "availableOptionsResponse_additionalQuestions": {
        "required": [
          "additionalQuestionsId"
        ],
        "type": "object",
        "properties": {
          "additionalQuestionsId": {
            "type": "string",
            "description": "An additional question that needs to be asked of the participant if they have chosen the answer associated with this additionalQuestions array. This questionsId should be found in this questionnaires array item.",
            "example": "EE-SMKR-DT"
          }
        },
        "description": "If the answer to the question above requires a follow-up question, that questionsId will be present here."
      },
      "availableOptionsResponse_answers": {
        "required": [
          "answersLabel",
          "answersValue"
        ],
        "type": "object",
        "properties": {
          "answersValue": {
            "type": "string",
            "description": "This is the system value for an answer. This is used to tie to participantAnswers answer value to get the full descriptions if needed. This value is the raw system value.",
            "example": "S"
          },
          "answersLabel": {
            "type": "string",
            "description": "This is a shortened version of the answer. This label could be translated as needed. This will return a more formatted value and add commas, dollar signs, and percent signs to the answer.",
            "example": "Smoker"
          },
          "additionalQuestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_additionalQuestions"
            }
          }
        },
        "description": "Answers"
      },
      "availableOptionsResponse_questions": {
        "required": [
          "answersType",
          "answersValidValueType",
          "effectiveDate",
          "isEffectiveDateElectable",
          "isQuestionProtected",
          "isShowEffectiveDate",
          "personInternalId",
          "questionsElectionStatus",
          "questionsId",
          "questionsLabel",
          "questionsRequiredType",
          "questionsTransactionId",
          "questionsType"
        ],
        "type": "object",
        "properties": {
          "questionsLabel": {
            "type": "string",
            "description": "A description of the question that is presented to the participant. This description could be translated into a foreign language as needed.",
            "example": "Employee Smoker Status"
          },
          "personInternalId": {
            "type": "string",
            "description": "The participant or dependent this question is being asked to.",
            "example": "123456789"
          },
          "questionsTransactionId": {
            "type": "string",
            "description": "The transaction identifier for the question.",
            "example": "2020"
          },
          "questionsElectionStatus": {
            "type": "string",
            "description": "Indicates the type of election present for this plan.\n  * `initialized` - Initialized values, no participant election.\n  * `defaulted` - Defaulted values.\n  * `unconfirmedElection` - Election made but not committed.\n  * `confirmedElection` - Election made and committed.\n  * `notApplicable` - A status is not applicable for this question because isQuestionProtected is true.\n",
            "example": "unconfirmedElection"
          },
          "questionsId": {
            "type": "string",
            "description": "Reference identifier object for a question. This would be an internal id for CDD, option response code, or credit response code.",
            "example": "EE-SMKR-STAT-CD"
          },
          "effectiveDate": {
            "type": "string",
            "description": "A string consisting of a source system begin date for an answer.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "answersType": {
            "type": "string",
            "description": "An enumerated type specifying the format of the answer.\n  * `date` - CCYY-DD-MM format\n  * `float` - 12 digits with 6 digits after the decimal\n  * `integer` - 10 digits, signed\n  * `money` - 12 digits with 2 digits after the decimal\n  * `text` - 30 characters in length\n  * `percent` - 3 digits in length with 3 digits after the decimal\n  * `phone` - 30 characters in length, formatted phone number. \n",
            "example": "text"
          },
          "questionsType": {
            "type": "string",
            "description": "An enumerated type specifying the type of question. \n  * `parent` - Question that is a parent question. Depending on the response, subquestions will appear.\n  * `subquestion` - A child to the parent question. Only displays if a particular response is selected to the parent question or previous subquestion.\n  * `standalone` - A standalone plan question. \n",
            "example": "standalone"
          },
          "answersValidValueType": {
            "type": "string",
            "description": "Helps determine how the Question should display to properly capture a response from the participant for definedValueValues.\n  * `match` - A set of valid values is provided, answer must match.\n  * `range` - A range of valid values is provided.\n  * `none` - Does not apply.\n",
            "example": "match"
          },
          "isShowEffectiveDate": {
            "type": "boolean",
            "description": "Determines if the effectiveDate is shown for this question.",
            "example": false
          },
          "isEffectiveDateElectable": {
            "type": "boolean",
            "description": "Determines if the effectiveDate is able to be updated for this question.",
            "example": false
          },
          "isQuestionProtected": {
            "type": "boolean",
            "description": "Whether or not the question can be updated. If protected this question is for display only.",
            "example": false
          },
          "questionsRequiredType": {
            "type": "string",
            "description": "Determines if a response is required for this Question.\n  * `alwaysRequired`\n  * `requiredIfCovered`\n  * `optional`",
            "example": "alwaysRequired"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_answers"
            }
          }
        },
        "description": "Questions"
      },
      "availableOptionsResponse_questionnaires": {
        "required": [
          "creditsAndSurchargesId",
          "questionnairesDescription",
          "questionnairesType"
        ],
        "type": "object",
        "properties": {
          "questionnairesDescription": {
            "type": "string",
            "description": "Long description of this questionnaire grouping.",
            "example": "Tobacco Status"
          },
          "questionnairesType": {
            "type": "string",
            "description": "An enumerated type specifying the type of questionnaire grouping.\n  * `inPlanNoAmount` - Questions asked to a participant associated with a particular plan. Does not change plan pricing.\n  * `inPlanDependentNoAmount` -  Questions asked to a participant in regards to a dependent. This question associated with a particular plan. Does not change plan pricing.\n  * `inPlanCreditsAndSurcharges` -  Questions asked to a participant associated with a particular credit, where the credit is associated with a plan. Can impact credit amounts.\n  * `standaloneCreditsAndSurcharges` - Questions asked to a participant associated with a particular credit, where the credit is not associated with a plan, but is a standalone credit. Can impact credit amounts.\n  * `inPlanNoAmountEligibility` - Questions asked to a participant associated with a particular plan. Does not change plan pricing but can impact eligibility of that plan such as available options.\n  * `inPlanPricingVariation` - Questions asked to a participant associated with a particular plan. The response can change plan pricing.\n  * `standalonePlanNoAmount` - Questions asked to a participant not associated with a particular plan. \n  * `declineCoverageReason` - Question asked to the participant when they are declining coverage for a plan.\n  * `healthSavingsAccountAffirmation` - Question when enrolling into an HSA plan.\n  * `healthSavingsAccountEligibility` - Question when enrolling into an HSA plan to confirm participant eligibility. \n  * `healthSavingsAccountAcceleratedContributionIndicator` - Question asking if the participant would like to accelerate their HSA contributions.\n  * `healthSavingsAccountAcceleratedContributionAmount` - The amount of contributions to be accelerated.\n  * `healthSavingsAccountElectronicConsent ` - A question capturing the consent of starting an HSA account for the HSA plan election page.\n  * `tobaccoStatus` - A question trying to determine the tobacco usage.\n  * `questionnaireAffirmation` - A questionnaire capturing participant affirmation.\n  * `flexibleSpendingAccountAffirmation` - Question when enrolling into an FSA plan.\n  * `termsAndConditions ` - When a user must respond to terms and conditions text.\n",
            "example": "inPlanCreditsAndSurcharges"
          },
          "creditsAndSurchargesId": {
            "type": "string",
            "description": "Reference identifier object for a credit or surcharge. This would be populated when the questionnairesType is credit related.",
            "example": "1000"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_questions"
            }
          }
        },
        "description": "A grouping of Questions and Answers"
      },
      "availableOptionsResponse_coverageCategories": {
        "required": [
          "coverageCategoryDescription",
          "coverageCategoryId"
        ],
        "type": "object",
        "properties": {
          "coverageCategoryId": {
            "type": "string",
            "description": "Provides the Coverage Category ID for the Option the participant is enrolled in.",
            "example": "30"
          },
          "coverageCategoryDescription": {
            "type": "string",
            "description": "The description of the Coverage Category that is presented to the participant.",
            "example": "You + Family"
          },
          "coverageCategoryType": {
            "type": "string",
            "description": "A common value that defines the Coverage Category that can be used for logical checks\n  * `childrenOnly`\n  * `dependentOnly`\n  * `noCoverage`\n  * `other`\n  * `participantChildren`\n  * `participantFamily`\n  * `participantOnly`\n  * `participantSpouse`\n  * `spouseChildren`\n  * `spouseOnly`\n  * `unbundled`\n  * `undefined`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "participantFamily"
          }
        },
        "description": "Coverage Category information."
      },
      "availableOptionsResponse_designAttributesLabel": {
        "type": "object",
        "properties": {
          "individualDesignAttributesLabel": {
            "type": "string",
            "description": "The label associated with the individual designAttributes fields.",
            "example": "Individual"
          },
          "familyDesignAttributesLabel": {
            "type": "string",
            "description": "The label associated with the family designAttributes fields.",
            "example": "You + Family"
          }
        },
        "description": "Labels for the designAttributes fields to inform the participant what coverage category these fields cover."
      },
      "availableOptionsResponse_steps": {
        "required": [
          "displayStepIndicator",
          "isStepVariable",
          "stepsSequence",
          "stepsType"
        ],
        "type": "object",
        "properties": {
          "stepsSequence": {
            "type": "integer",
            "description": "Used to provide the order of the steps.",
            "format": "int32",
            "example": 1
          },
          "stepsType": {
            "type": "string",
            "description": "A common value that defines the step. \n  * `creditOnly`\n  * `creditSurcharge`\n  * `dependent`\n  * `healthAssessmentOnly`\n  * `miscellaneous`\n  * `electOption`\n  * `surchargeOnly`",
            "example": "dependent"
          },
          "displayStepIndicator": {
            "type": "string",
            "description": "The common value that indicates if this is the step that should appear as the electable step or a collapsed or hidden step. \n   * `collapsed`\n   * `elect`\n   * `hidden`",
            "example": "collapsed"
          },
          "isStepVariable": {
            "type": "boolean",
            "description": "Defines if this step is variable based on elections the participant has made.",
            "example": false
          }
        },
        "description": "Labels for the steps that appear on the Health Plan Election page. "
      },
      "availableOptionsResponse_suggestions": {
        "required": [
          "isTopSuggestion",
          "suggestionsScoreAmount",
          "suggestionsType"
        ],
        "type": "object",
        "properties": {
          "suggestionsType": {
            "type": "string",
            "description": "The type of suggestion being presented to the participant.  * `spendingAccountCatchup` * `spendingAccountSourceAmount` * `spendingAccountValidRange` * `currentAmount` * `employerSeed` * `medicalExpenseEstimator` * `minimumElectedAmount` * `youOnly`",
            "example": "spendingAccountSourceAmount"
          },
          "suggestionsScoreAmount": {
            "type": "number",
            "description": "The score of the suggestion. The highest scoring suggestion is awarded the top suggestion.",
            "format": "double",
            "example": 1.0
          },
          "suggestionsTotalContributionAmount": {
            "type": "number",
            "description": "The amount suggested to contribute. This is only populated for the top suggestion.",
            "format": "double",
            "example": 7000.0
          },
          "isTopSuggestion": {
            "type": "boolean",
            "description": "Defines the 'winning' suggestion that should be presented to the user as the primary suggestion.",
            "example": false
          }
        },
        "description": "Suggestions offered to the participant to help guide their elections with information. "
      },
      "availableOptionsResponse_suggestionsExplanationsDiagnostics": {
        "required": [
          "suggestionsExplanationsDiagnosticsName",
          "suggestionsExplanationsDiagnosticsValue",
          "suggestionsExplanationsDiagnosticsValueType"
        ],
        "type": "object",
        "properties": {
          "suggestionsExplanationsDiagnosticsName": {
            "type": "string",
            "description": "The name for name/value pair for text fields that require additional data from the source system.",
            "example": "ELEC-SRC-AT"
          },
          "suggestionsExplanationsDiagnosticsValueType": {
            "type": "string",
            "description": "The type of information present in the value field.\n  * `rate`\n  * `money`\n  * `boolean`\n  * `date`",
            "example": "money"
          },
          "suggestionsExplanationsDiagnosticsValue": {
            "type": "string",
            "description": "The value for name/value pair for text fields that require additional data from the source system.",
            "example": "2520"
          }
        },
        "description": "Additional diagnostics for the explanation details. "
      },
      "availableOptionsResponse_suggestionsExplanations": {
        "required": [
          "suggestionsExplanationsType"
        ],
        "type": "object",
        "properties": {
          "suggestionsExplanationsType": {
            "type": "string",
            "description": "The explanation type for the suggestion. Defines the explanation associated with the suggestion.\n  * `employerMatchWithEmployeeContribution`\n  * `employerContributionWithEmployeeContribution`\n  * `employerContribution`\n  * `canNotLose`\n  * `claimsMaximum`\n  * `claims`\n  * `currentContributionMaximum`\n  * `currentContribution`\n  * `deductibleMaximum`\n  * `deductibleReminder`\n  * `deductible`\n  * `employerMatch`\n  * `employerMatchAndEmployerSeed`\n  * `employerSeed`\n  * `medicalClaimsMaximum`\n  * `medicalClaims`\n  * `medicalDentalClaims`\n  * `medicalDentalClaimsMaximum`\n  * `medicalPrescriptionClaimsMaximum`\n  * `medicalPrescriptionClaims`\n  * `medicalPrescriptionDentalClaims`\n  * `medicalPrescriptionDentalClaimsMaximum`\n  * `medicalExpenseEstimatorMaximum`\n  * `medicalExpenseEstimator`\n  * `prescriptionClaimsMaximum`\n  * `prescriptionClaims`\n  * `prescriptionAndDentalClaimsMaximum`\n  * `prescriptionAndDentalClaims`\n  * `unsureCanNotLose`\n  * `unsure`\n  * `whatYouCan`                    ",
            "example": "employerSeed"
          },
          "suggestionsExplanationsDiagnostics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_suggestionsExplanationsDiagnostics"
            }
          }
        },
        "description": "Explanation details for the participant's suggestion. "
      },
      "availableOptionsResponse_choices": {
        "required": [
          "planId",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "The identifier associated with this Plan.",
            "example": "3500"
          },
          "transactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan. This will be used in the PUT request when making the participant elections.",
            "example": "3500"
          },
          "adjustedFrequencyType": {
            "type": "string",
            "description": "The factor by which the adjusted pricing amount appears as.\n  * `annual` - Annual adjusted price.\n  * `monthly` - Monthly adjusted price.\n  * `semiMonthly` - Semi-monthly adjusted price.\n  * `payPeriod` - Pay Period adjusted price.\n  * `quarterly` - Quarterly adjusted price.\n  * `weekly` - Weekly adjusted price.\n  * `biweekly` - Bi-weekly adjusted price.\n  * `notApplicable` - Adjusted frequency type not applicable.\n",
            "example": "monthly"
          },
          "employeeDeclineCoverageAdjustedCreditAmount": {
            "type": "number",
            "description": "This is a numeric field representing the credit received if the enrollee declines coverage. This is also  referred to as the opt out credit amount. ",
            "format": "double",
            "example": 100.01
          },
          "employeeDeclineCoverageAnnualCreditAmount": {
            "type": "number",
            "description": "This is the numeric field representing the annual credit received if the enrollee declines coverage. This is also referred to as the annual opt out credit amount. ",
            "format": "double",
            "example": 1200.12
          },
          "stepVariationType": {
            "type": "string",
            "description": "This field indicates if any of the steps listed in the step array could be variable or if the step numbers should be suppressed even if the steps aren't variable. \n  * `traditional` - This indicates that the steps in the list should display. \n  * `suppressed` - This indicates that the steps should display without any step numbers.\n  * `variable` - This indicates that 1 to many of the steps will only display under certain conditions. This needs to be evaluated at runtime and can vary while an enrollee remains on the page.\n",
            "example": "variable"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_options"
            }
          },
          "accountPlan": {
            "$ref": "#/components/schemas/availableOptionsResponse_accountPlan"
          },
          "creditsAndSurcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_creditsAndSurcharges"
            }
          },
          "questionnaires": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_questionnaires"
            }
          },
          "coverageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_coverageCategories"
            }
          },
          "designAttributesLabel": {
            "$ref": "#/components/schemas/availableOptionsResponse_designAttributesLabel"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_steps"
            }
          },
          "footnotes": {
            "$ref": "#/components/schemas/footnotes"
          },
          "customText": {
            "$ref": "#/components/schemas/customText"
          },
          "enrollmentMessages": {
            "$ref": "#/components/schemas/enrollmentMessages"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_suggestions"
            }
          },
          "suggestionsExplanations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOptionsResponse_suggestionsExplanations"
            }
          }
        },
        "description": "Choices information."
      },
      "primaryCareProvidersResponse_primaryCareProviderDetails": {
        "required": [
          "isActualCurrentProvider",
          "isCurrentPrimaryCareProviderCollected",
          "isElectedCurrentProvider",
          "primaryCareProvidersElectionType"
        ],
        "type": "object",
        "properties": {
          "isCurrentPrimaryCareProviderCollected": {
            "type": "boolean",
            "description": "Determines whether or not we capture the participant election for whether or not the provider is currently being seen.",
            "example": true
          },
          "primaryCareProvidersType": {
            "type": "string",
            "description": "The type of providers expected to be collected for this plan.\n  * `medicalGroup`\n  * `dentist`\n  * `obgyn`\n  * `primaryCareProvider`\n  * `pharmacy`\n  * `specialist`\n  * `vision`\n  * `other`",
            "example": "primaryCareProvider"
          },
          "primaryCareProvidersElectionType": {
            "type": "string",
            "description": "This tells the front end whether we should capture the provider id, name, or both.\n  * `id` - Only provider id is saved.\n  * `name` - Only provider name is saved.\n  * `bothIdAndName` - Both provider id and name are saved.\n",
            "example": "bothIdAndName"
          },
          "actualPrimaryCareProvidersId": {
            "type": "string",
            "description": "The id associated with the primary care provider. This element will not come across if primaryCareProvidersElectionType is name.",
            "example": "1234"
          },
          "actualPrimaryCareProvidersName": {
            "type": "string",
            "description": "The chosen Primary Care Provider by the participant. This element will not come across if primaryCareProvidersElectionType is id.",
            "example": "Dr. John Doe"
          },
          "isActualCurrentProvider": {
            "type": "boolean",
            "description": "Indicates whether or not the provider is their current provider.  Whether or not they have seen the provider before. This element will not come across if isCurrentPrimaryCareProviderCollected is false.",
            "example": true
          },
          "electedPrimaryCareProvidersId": {
            "type": "string",
            "description": "The id associated with the primary care provider election.  This element will not come across if primaryCareProvidersElectionType is name.",
            "example": "1234"
          },
          "electedPrimaryCareProvidersName": {
            "type": "string",
            "description": "The elected Primary Care Provider by the participant. This element will not come across if primaryCareProvidersElectionType is id.",
            "example": "Dr. John Doe"
          },
          "isElectedCurrentProvider": {
            "type": "boolean",
            "description": "Indicates whether or not the provider is their current elected provider.  Whether or not they have seen the provider before. This element will not come across if isCurrentPrimaryCareProviderCollected is false.",
            "example": true
          }
        },
        "description": "Provides the Primary Plan Provider information for the Participant and Dependents."
      },
      "primaryCareProvidersResponse_personPrimaryCareProviders": {
        "required": [
          "birthDate",
          "isParticipant",
          "personInternalId"
        ],
        "type": "object",
        "properties": {
          "personInternalId": {
            "type": "string",
            "description": "The internal identifier for the participant or dependent for this primary care provider record.",
            "example": "123456789"
          },
          "birthDate": {
            "type": "string",
            "description": "Birth Date of the participant or dependent for this primary care provider record.",
            "format": "date",
            "example": "2016-11-02T00:00:00"
          },
          "isParticipant": {
            "type": "boolean",
            "description": "Defines whether or not this is the participant.",
            "example": true
          },
          "primaryCareProviderDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/primaryCareProvidersResponse_primaryCareProviderDetails"
            }
          }
        },
        "description": "Provides the Primary Plan Provider information for the Participant's Dependents."
      },
      "reviseElectionsRequest_option_unbundledCoverageCategory": {
        "required": [
          "electedCoverageCategoryId",
          "electedDependentQuantity"
        ],
        "type": "object",
        "properties": {
          "electedCoverageCategoryId": {
            "type": "string",
            "description": "The identifier associated with this elected coverage category.",
            "example": "30"
          },
          "electedDependentQuantity": {
            "type": "integer",
            "description": "This is a numeric field representing the number of dependents that have been elected to be covered.",
            "format": "int32",
            "example": 3
          }
        },
        "description": "Unbundled Coverage Category. If the coverage category varies the plan pricing by quantity of dependents elected."
      },
      "reviseElectionsRequest_option_benefitAmounts": {
        "required": [
          "electedBenefitAmountsCoverageId"
        ],
        "type": "object",
        "properties": {
          "electedBenefitAmountsCoverageId": {
            "type": "string",
            "description": "The identifier associated with this benefit amount coverage values.",
            "example": "3502"
          },
          "electedCoverageAmount": {
            "type": "number",
            "description": "The coverage amount offered by this option.   Example - Life insurance plan with $50,000 coverage.  This is a numeric field representing a dollar amount. Not usually used in conjunction with increments or min/max amounts.",
            "format": "double",
            "example": 50000.0
          },
          "electedIncrementQuantity": {
            "type": "integer",
            "description": "This is a numeric field representing the election of increments for a participant. If a participant was electing an increment for Vacation Days, this would be the number of days the participant has chosen.",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Benefit Amount level Coverage information for the Participant's Election."
      },
      "reviseElectionsRequest_option_sideFund": {
        "required": [
          "electedSideFundAmount"
        ],
        "type": "object",
        "properties": {
          "electedSideFundAmount": {
            "type": "number",
            "description": "The elected dollar amount for the side fund.",
            "format": "double",
            "example": 0.0
          }
        },
        "description": "Side Fund level Coverage information for the Participant's Election."
      },
      "reviseElectionsRequest_option": {
        "required": [
          "electedOptionId"
        ],
        "type": "object",
        "properties": {
          "electedOptionId": {
            "type": "string",
            "description": "The identifier associated with the elected Option.",
            "example": "3701"
          },
          "electedCoverageCategoryId": {
            "type": "string",
            "description": "The identifier associated with this elected coverage category. The coverage category can be provided if plan allows for elected coverage categories via the electionType.",
            "example": "30"
          },
          "electedOptionTaxCode": {
            "type": "string",
            "description": "The tax code associated the participant elected for the tax code for the Option, if tax code is electable.\n  * `postTax` - Post-Tax plan pricing.\n  * `preTax` - Pre-Tax plan pricing.\n  * `split` - Split Post-Tax and Pre-Tax pricing apply. \n",
            "example": "preTax"
          },
          "unbundledCoverageCategory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_option_unbundledCoverageCategory"
            }
          },
          "benefitAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_option_benefitAmounts"
            }
          },
          "sideFund": {
            "$ref": "#/components/schemas/reviseElectionsRequest_option_sideFund"
          }
        },
        "description": "Election information."
      },
      "reviseElectionsRequest_dependentCoverages": {
        "required": [
          "dependentPersonInternalId",
          "isDependentCoveredElection"
        ],
        "type": "object",
        "properties": {
          "dependentPersonInternalId": {
            "type": "string",
            "description": "The internal identifier associated with the participant's dependent relation.",
            "example": "123456789"
          },
          "isDependentCoveredElection": {
            "type": "boolean",
            "description": "Indicates whether or not the Dependent has been elected to be covered under this Plan.",
            "example": true
          }
        },
        "description": "Relationship Coverage Election information for the Participant."
      },
      "reviseElectionsRequest_dependentPlans": {
        "required": [
          "dependentTransactionId"
        ],
        "type": "object",
        "properties": {
          "dependentTransactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan's dependent coverage data. This id should match the dependentTransactionId of this same plan from the GET.",
            "example": "3505"
          },
          "dependentCoverages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_dependentCoverages"
            }
          }
        },
        "description": "Dependent Plan coverage information for the Participant."
      },
      "reviseElectionsRequest_primaryCareProviders": {
        "required": [
          "isElectedCurrentProvider"
        ],
        "type": "object",
        "properties": {
          "electedPrimaryCareProvidersId": {
            "type": "string",
            "description": "The id associated with the primary care provider election.",
            "example": "1234"
          },
          "electedPrimaryCareProvidersName": {
            "type": "string",
            "description": "The chosen provider name.",
            "example": "Dr. John Doe"
          },
          "isElectedCurrentProvider": {
            "type": "boolean",
            "description": "Indicates whether or not the provider is their current provider.  Whether or not they have seen the provider before.",
            "example": true
          }
        },
        "description": "The primary care provider information"
      },
      "reviseElectionsRequest_personPrimaryCareProviders": {
        "required": [
          "personInternalId"
        ],
        "type": "object",
        "properties": {
          "personInternalId": {
            "type": "string",
            "description": "The participant this primary care provider election is associated with.",
            "example": "123456789"
          },
          "dependentPersonInternalId": {
            "type": "string",
            "description": "The dependent this primary care provider election is associated with.",
            "example": "123456780"
          },
          "primaryCareProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_primaryCareProviders"
            }
          }
        },
        "description": "A list of participant and dependent provider elections."
      },
      "reviseElectionsRequest_accountPlan_contributionSources": {
        "required": [
          "contributionSourcesId",
          "electedContributionAmount"
        ],
        "type": "object",
        "properties": {
          "contributionSourcesId": {
            "type": "string",
            "description": "Reference identifier object for a contribution source.",
            "example": "20"
          },
          "electedContributionAmount": {
            "type": "number",
            "description": "This is a numeric field representing a person's annual after tax contribution source amount for an option.",
            "format": "double",
            "example": 2500.0
          },
          "electionContributionFrequency": {
            "type": "string",
            "description": "The frequency of the contribution being elected by the participant.  \n  * `annual` - Annual adjusted contributions.\n  * `monthly` - Monthly adjusted contributions.\n  * `semiMonthly` - Semi-monthly adjusted contributions.\n  * `payPeriod` - Pay Period adjusted contributions.\n  * `quarterly` - Quarterly adjusted contributions.\n  * `weekly` - Weekly adjusted contributions.\n  * `biweekly` - Bi-weekly adjusted contributions.\n  * `notApplicable` - Contribution frequency type not applicable.\n",
            "example": "annual"
          }
        },
        "description": "Contribution Sources for the Account Plan coverage for the Participant."
      },
      "reviseElectionsRequest_accountPlan": {
        "required": [
          "contributionSources"
        ],
        "type": "object",
        "properties": {
          "contributionSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_accountPlan_contributionSources"
            }
          }
        },
        "description": "Account plan coverage information for the Participant."
      },
      "reviseElectionsRequest_questions": {
        "required": [
          "answersValue",
          "personInternalId",
          "questionsId",
          "questionsTransactionId"
        ],
        "type": "object",
        "properties": {
          "personInternalId": {
            "type": "string",
            "description": "The participant or dependent this question is associated with.",
            "example": "123456789"
          },
          "effectiveDate": {
            "type": "string",
            "description": "A string consisting of a the date election for the question, if the date is an electable field.",
            "format": "date",
            "example": "2018-01-01T00:00:00"
          },
          "questionsTransactionId": {
            "type": "string",
            "description": "The transaction identifier for the question.",
            "example": "2020"
          },
          "questionsId": {
            "type": "string",
            "description": "Reference identifier object for a question.",
            "example": "EE-SMKR-STAT-CD"
          },
          "answersValue": {
            "type": "string",
            "description": "This is the system value for an answer that the participant has chosen as their value. ",
            "example": "S"
          }
        },
        "description": "Questions"
      },
      "reviseElectionsRequest_questionnaires": {
        "required": [
          "questions"
        ],
        "type": "object",
        "properties": {
          "creditsAndSurchargesId": {
            "type": "string",
            "description": "Reference identifier object for a credit or surcharge. This would be populated when the questionnairesType is credit related.",
            "example": "1000"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_questions"
            }
          }
        },
        "description": "A grouping of Questions and Answers"
      },
      "reviseElectionsRequest_elections": {
        "required": [
          "isFinalElection",
          "planId",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "The identifier associated with this Plan.",
            "example": "3500"
          },
          "transactionId": {
            "type": "string",
            "description": "The identifier to the transaction associated with this Plan. This should match the transactionId from the GET request associated with the plan.",
            "example": "3500"
          },
          "isFinalElection": {
            "type": "boolean",
            "description": "The identifier to the system to know whether to process and  validate the election or take in the partial election without edit validation. ",
            "example": true
          },
          "option": {
            "$ref": "#/components/schemas/reviseElectionsRequest_option"
          },
          "dependentPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_dependentPlans"
            }
          },
          "personPrimaryCareProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_personPrimaryCareProviders"
            }
          },
          "accountPlan": {
            "$ref": "#/components/schemas/reviseElectionsRequest_accountPlan"
          },
          "questionnaires": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reviseElectionsRequest_questionnaires"
            }
          }
        },
        "description": "-> Election information. Even though none of the objects in this request are required, at least one of them needs to be present for this revise to perform any work."
      },
      "reviseCancelRequest_plans": {
        "required": [
          "planId"
        ],
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "The identifier associated with this Plan.",
            "example": "3500"
          }
        },
        "description": "Election information."
      },
      "footnotes_inner": {
        "required": [
          "footnoteSummary",
          "footnoteType"
        ],
        "type": "object",
        "properties": {
          "footnoteSummary": {
            "type": "string",
            "description": "Major category of the footnote.\n  * `deductibleEmbedded`\n  * `deductibleNotEmbedded`\n  * `hsaEstimatedTaxSavings`\n  * `hsaTotalAnnualContribution`\n  * `healthReimbursementAccount`\n  * `noCoverageWaiver`\n  * `OOPMaxEmbeddedRxAppliesExcludingCoinsurance`\n  * `OOPMaxEmbeddedRxAppliesIncludingCoinsurance`\n  * `OOPMaxNotEmbedded`\n  * `OOPMaxNotEmbeddedCostShare`\n  * `OOPMaxNotEmbeddedCostShareRxApplies`\n  * `OOPMaxNotEmbeddedRxApplies`\n  * `postTax`\n  * `preAndPostTax`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "deductibleEmbedded"
          },
          "footnoteType": {
            "type": "string",
            "description": "Minor type of the footnote.\n  * `contribution`\n  * `cost`\n  * `coverage`\n  * `coverageCategory`\n  * `dependent`\n  * `family`\n  * `option`\n  * `optionCoverage`\n  * `planDesignData`\n  * `suggestion`\n  * `taxation`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "option"
          },
          "footnoteAdditionalText": {
            "type": "array",
            "items": {
              "required": [
                "footnoteAdditionalTextFieldType",
                "footnoteAdditionalTextId",
                "footnoteAdditionalTextValue"
              ],
              "type": "object",
              "properties": {
                "footnoteAdditionalTextId": {
                  "type": "string",
                  "description": "Source system id of the footnote text data point.",
                  "example": "FRST-NM"
                },
                "footnoteAdditionalTextFieldType": {
                  "type": "string",
                  "description": "Data type format of the footnoteAdditionalTextValue field. * `date` * `double` * `integer` * `money` * `percent` * `phone` * `text`\n",
                  "example": "text"
                },
                "footnoteAdditionalTextValue": {
                  "type": "string",
                  "description": "A value to be displayed in the context of a footnote.",
                  "example": "John"
                }
              }
            },
            "description": "Array of footnote variable text data points, used in the display of the footnote."
          }
        }
      },
      "customText_inner": {
        "required": [
          "customTextId",
          "customTextValue"
        ],
        "type": "object",
        "properties": {
          "customTextId": {
            "type": "string",
            "description": "The identifier for the custom text. This is used for text placement on a page."
          },
          "customTextValue": {
            "type": "string",
            "description": "The text key for the custom text.  This is used to fetch the appropriate text."
          }
        }
      },
      "enrollmentMessages_inner": {
        "required": [
          "enrollmentMessageSummary",
          "enrollmentMessageType",
          "enrollmentMessagesSummary",
          "enrollmentMessagesType"
        ],
        "type": "object",
        "properties": {
          "enrollmentMessagesSummary": {
            "type": "string",
            "description": "Major category of the enrollment message.\n  * `dependentVerification`\n  * `evidenceOfInsurability`\n  * `hsaAcceleration`\n  * `hsaTurnaround`\n  * `medicareAdvantageDisenrollment`\n  * `medicareAdvantageEnrollment`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "evidenceOfInsurability"
          },
          "enrollmentMessagesType": {
            "type": "string",
            "description": "Minor type of the enrollment message.\n  * `contribution`\n  * `cost`\n  * `coverage`\n  * `coverageCategory`\n  * `dependent`\n  * `family`\n  * `option`\n  * `optionCoverage`\n  * `planDesignData`\n  * `suggestion`\n  * `taxation`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "option"
          },
          "enrollmentMessageSummary": {
            "type": "string",
            "description": "Major category of the enrollment message.\n  * `dependentVerification`\n  * `evidenceOfInsurability`\n  * `hsaAcceleration`\n  * `hsaTurnaround`\n  * `medicareAdvantageDisenrollment`\n  * `medicareAdvantageEnrollment`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "evidenceOfInsurability"
          },
          "enrollmentMessageType": {
            "type": "string",
            "description": "Minor type of the enrollment message.\n  * `contribution`\n  * `cost`\n  * `coverage`\n  * `coverageCategory`\n  * `dependent`\n  * `family`\n  * `option`\n  * `optionCoverage`\n  * `planDesignData`\n  * `suggestion`\n  * `taxation`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.\n",
            "example": "option"
          },
          "enrollmentMessagesAdditionalText": {
            "type": "array",
            "items": {
              "required": [
                "enrollmentMessagesAdditionalTextFieldType",
                "enrollmentMessagesAdditionalTextId",
                "enrollmentMessagesAdditionalTextValue"
              ],
              "type": "object",
              "properties": {
                "enrollmentMessagesAdditionalTextId": {
                  "type": "string",
                  "description": "Source system id of the enrollment message text data point.",
                  "example": "FRST-NM"
                },
                "enrollmentMessagesAdditionalTextFieldType": {
                  "type": "string",
                  "description": "Data type format of the enrollmentMessagesAdditionalTextValue field. * `date` * `double` * `integer` * `money` * `percent` * `phone` * `text`\n",
                  "example": "text"
                },
                "enrollmentMessagesAdditionalTextValue": {
                  "type": "string",
                  "description": "A value to be displayed in the context of an enrollment message.",
                  "example": "John"
                }
              }
            },
            "description": "Array of enrollment messages variable text data points, used in the display of the enrollment message."
          },
          "enrollmentMessageAdditionalText": {
            "type": "array",
            "items": {
              "required": [
                "enrollmentMessageAdditionalTextFieldType",
                "enrollmentMessageAdditionalTextId",
                "enrollmentMessageAdditionalTextValue"
              ],
              "type": "object",
              "properties": {
                "enrollmentMessageAdditionalTextId": {
                  "type": "string",
                  "description": "Source system id of the enrollment message text data point.",
                  "example": "FRST-NM"
                },
                "enrollmentMessageAdditionalTextFieldType": {
                  "type": "string",
                  "description": "Data type format of the enrollmentMessageAdditionalTextValue field. * `date` * `double` * `integer` * `money` * `percent` * `phone` * `text`\n",
                  "example": "text"
                },
                "enrollmentMessageAdditionalTextValue": {
                  "type": "string",
                  "description": "A value to be displayed in the context of an enrollment message.",
                  "example": "John"
                }
              }
            },
            "description": "Array of enrollment messages variable text data points, used in the display of the enrollment message."
          }
        }
      },
      "tipsAndAlerts_inner": {
        "required": [
          "tipsAndAlertsGroupType",
          "tipsAndAlertsId",
          "tipsAndAlertsType"
        ],
        "type": "object",
        "properties": {
          "tipsAndAlertsId": {
            "type": "string",
            "description": "The unique identifier for a tipsAndAlerts.",
            "example": "1111"
          },
          "tipsAndAlertsType": {
            "type": "string",
            "description": "The type is used to help define the type of tipsAndAlerts being returned. This field is used as an internal category and isn't meant to be presented to the user.",
            "example": "currentCoverageUnavailable"
          },
          "tipsAndAlertsGroupType": {
            "type": "string",
            "description": "The group type defines this tipsAndAlerts as either a tip or an alert.\n  * `tip`\n  * `alert`\n",
            "example": "alert"
          },
          "tipsAndAlertsLinkType": {
            "type": "string",
            "description": "The type of link present for this tipsAndAlerts.\n   * `primaryPlan`\n   * `singleSingOn`\n   * `titleLink`\n   * `thirdParty`\n",
            "example": "primaryPlan"
          },
          "tipsAndAlertsLinkName": {
            "type": "string",
            "description": "The name associated with the link.",
            "example": "Medical Plan Election"
          },
          "tipsAndAlertsLinkValue": {
            "type": "string",
            "description": "The value of the link.",
            "example": "02HPE"
          },
          "tipsAndAlertsAdditionalText": {
            "type": "array",
            "items": {
              "required": [
                "tipsAndAlertsAdditionalTextSequence",
                "tipsAndAlertsAdditionalTextType",
                "tipsAndAlertsAdditionalTextValue"
              ],
              "type": "object",
              "properties": {
                "tipsAndAlertsAdditionalTextSequence": {
                  "type": "string",
                  "description": "The sequence of the additional text. This value can be used to replace text in the tipsAndAlerts text.",
                  "example": "1"
                },
                "tipsAndAlertsAdditionalTextType": {
                  "type": "string",
                  "description": "The type of data found in the value.\n  * `client`\n  * `currency`\n  * `date`\n  * `percent`\n  * `text`\n",
                  "example": "text"
                },
                "tipsAndAlertsAdditionalTextValue": {
                  "type": "string",
                  "description": "The value of with the additional text.",
                  "example": "Medical"
                }
              },
              "description": "Additional information."
            },
            "description": "The additional text information. Provides an array of additional text that is variable based on plan and participant information. To be used for participant facing text."
          }
        }
      },
      "providerNetworksResponse_providerNetworks": {
        "required": [
          "optionDescription",
          "optionId",
          "primaryCareProviderNetworkId"
        ],
        "type": "object",
        "properties": {
          "primaryCareProviderNetworkId": {
            "type": "string",
            "description": "The provider network identifier.",
            "example": "1234"
          },
          "optionId": {
            "type": "string",
            "description": "The option id associated with this provider data.",
            "example": "3700"
          },
          "optionDescription": {
            "type": "string",
            "description": "The description of the option.",
            "example": "Aetna PPO"
          }
        },
        "description": "Provider Network"
      },
      "healthPlanComparisonAvailableOptionsResponse_availableOptions": {
        "required": [
          "compositePlanDesignId",
          "isCurrentOption",
          "optionDescription",
          "optionId"
        ],
        "type": "object",
        "properties": {
          "optionId": {
            "type": "string",
            "description": "The unique identifier for the option associated with this plan design.",
            "example": "3511"
          },
          "optionDescription": {
            "type": "string",
            "description": "The description of the option.",
            "example": "Aetna PPO"
          },
          "compositePlanDesignId": {
            "type": "string",
            "description": "The unique identifier for the plan design.",
            "example": "953456"
          },
          "isCurrentOption": {
            "type": "boolean",
            "description": "The will determine if this option is the current option.",
            "example": true
          },
          "optionType": {
            "type": "string",
            "description": "This is a static code that is used to identify what type of plan design product the actual option id is. This field is used as an internal category and isn't meant to be presented to the user. This field will not be translated into other languages.\n  * `accident`\n  * `adoptionAssistance`\n  * `childBasicLife`\n  * `childSupplementalLife`\n  * `commuterExpenseFlexibleSpendingAccount\n  * `indemnity`\n  * `pointOfService`\n  * `preferredProviderOrganization`\n  * `healthMaintenanceOrganization`\n  * `criticalIllness`\n  * `dental`\n  * `dentalHealthMaintenanceOrganization`\n  * `dentalIndemnity`\n  * `dependentBasicLife`\n  * `dependentCareFlexibleSpendingAccount`\n  * `dependentSupplementalLife`\n  * `employeeAssistanceProgram`\n  * `employeeBasicLife`\n  * `employeeLongTermCare`\n  * `employeeSupplementalLife`\n  * `exclusiveProviderOrganization`\n  * `exclusiveProviderOrganizationHmo`\n  * `exclusiveProviderOrganizationIndemnity`\n  * `exclusiveProviderOrganizationPpo`\n  * `familyBasicLife`\n  * `familySupplementalLife`\n  * `financialPlan`\n  * `groupLegal`\n  * `healthcareFlexibleSpendingAccount`\n  * `healthReimbursementAccount`\n  * `healthSavingsAccountFamily`\n  * `healthSavingsAccountIndividual`\n  * `hearing`\n  * `hospital`\n  * `identityTheft`\n  * `invalid`\n  * `longTermDisability`\n  * `mixed`\n  * `noCoverage`\n  * `other`\n  * `otherFlexibleSpendingAccount`\n  * `prepaidLegal`\n  * `prescriptionDrug`\n  * `retireeBasic`\n  * `retireeSupplemental`\n  * `serviceCredit`\n  * `shortTermDisability`\n  * `spouseBasicLife`\n  * `spouseLongTermCare`\n  * `spouseSupplementalLife`\n  * `survivorIncome`\n  * `tuitionReimbursement`\n  * `undefined`\n  * `vacationBuying`\n  * `vacationSell`\n  * `vision`\n  * `wellnessCredit`\n  * `medical`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.                ",
            "example": "preferredProviderOrganization"
          }
        },
        "description": "Super Sections."
      },
      "chartAttributes_dataElements": {
        "required": [
          "dataElementsId",
          "dataElementsTitle",
          "dataElementsType"
        ],
        "type": "object",
        "properties": {
          "dataElementsId": {
            "type": "string",
            "description": "Unique identifier for the data element.",
            "example": "9248"
          },
          "dataElementsType": {
            "type": "string",
            "description": "An enumerated value for the data element.\n  * `outOfPocket`\n  * `annualDeductible`\n  * `TO BE DETERMINED`\n",
            "example": "outOfPocket"
          },
          "dataElementsTitle": {
            "type": "string",
            "description": "The title of the data element.",
            "example": "You and family"
          }
        },
        "description": "Data Elements."
      },
      "chartAttributes_sections": {
        "required": [
          "dataElements",
          "sectionsId",
          "sectionsTitle"
        ],
        "type": "object",
        "properties": {
          "sectionsId": {
            "type": "string",
            "description": "Unique identifier for the section.",
            "example": "10"
          },
          "sectionsTitle": {
            "type": "string",
            "description": "The title of the section.",
            "example": "Specialist office visit"
          },
          "dataElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chartAttributes_dataElements"
            },
            "description": "The data point presented for the section."
          }
        },
        "description": "Sections."
      },
      "chartAttributes_superSections": {
        "required": [
          "sections",
          "superSectionSummary",
          "superSectionsId",
          "superSectionsTitle"
        ],
        "type": "object",
        "properties": {
          "superSectionsId": {
            "type": "string",
            "description": "Unique identifier for the super section.",
            "example": "10"
          },
          "superSectionsTitle": {
            "type": "string",
            "description": "The title of the super section.",
            "example": "Key Benefits"
          },
          "superSectionSummary": {
            "type": "string",
            "description": "Defines where this super section applies.\n  * `standard`\n  * `mobile`\n  * `inquiry`\n  * `yourTotalRewards`\n",
            "example": "Key Benefits"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chartAttributes_sections"
            },
            "description": "Sections of the health plan chart under super sections."
          }
        },
        "description": "Super Sections."
      },
      "planDesigns_inner": {
        "required": [
          "compositePlanDesignId",
          "dataElements"
        ],
        "type": "object",
        "properties": {
          "compositePlanDesignId": {
            "type": "string",
            "description": "The unique identifier for the plan design.",
            "example": "953456"
          },
          "dataElements": {
            "type": "array",
            "items": {
              "required": [
                "dataElementsId",
                "dataElementsValueFormatType"
              ],
              "type": "object",
              "properties": {
                "dataElementsId": {
                  "type": "string",
                  "description": "Unique identifier for the data element.",
                  "example": "9248"
                },
                "dataElementsKeyId": {
                  "type": "string",
                  "description": "An identifier that is populated for certain data types to provide further information. If the system generated this value from a key this field is populated.",
                  "example": "1234"
                },
                "dataElementsValue": {
                  "type": "string",
                  "description": "The type of data present in the data text field.",
                  "example": "string"
                },
                "dataElementsURL": {
                  "type": "string",
                  "description": "The type of Url for the provision Code.",
                  "example": "string"
                },
                "titleFlagCode": {
                  "type": "string",
                  "description": "This element will save the information if the current\n      provision code should show as a title field.",
                  "example": "T"
                },
                "dataElementsValueFormatType": {
                  "type": "string",
                  "description": "The type of data present in the data text field.\n  * `text`\n  * `dollarAmount`\n  * `externalURL`\n  * `findADoctorCurrentCoverage`\n  * `findADoctorBusinessProcess`\n  * `singleSignOnURL`\n  * `fileURLSequence`\n  * `fileURL`\n  * `file`\n  * `checkWithPlan`\n  * `spaces`\n",
                  "example": "text"
                },
                "dataElementsBenefitLevels": {
                  "type": "array",
                  "items": {
                    "required": [
                      "dataElementsBenefitLevelsCode",
                      "dataElementsValue"
                    ],
                    "type": "object",
                    "properties": {
                      "dataElementsBenefitLevelsCode": {
                        "type": "string",
                        "description": "The benefit code defines a specific level of benefit.\n  * `inNetwork`\n  * `outOfNetwork`\n  * `both`\n  * `notApplicable`\n",
                        "example": "inNetwork"
                      },
                      "dataElementsBenefitLevelsText": {
                        "type": "string",
                        "description": "The benefit level text associated with the dataElementsBenefitLevelsCode.",
                        "example": "In-Network"
                      },
                      "dataElementsValue": {
                        "type": "string",
                        "description": "The text describing this data element's benefit.",
                        "example": "70% covered after deductible is met"
                      }
                    },
                    "description": "Benefit levels."
                  },
                  "description": "The various benefit levels of a data element."
                },
                "files": {
                  "type": "array",
                  "items": {
                    "required": [
                      "filesDisplayText",
                      "filesName"
                    ],
                    "type": "object",
                    "properties": {
                      "filesDisplayText": {
                        "type": "string",
                        "description": "The name of the file presented to the participant.",
                        "example": "Carrier - Traditional PPO - All Locations"
                      },
                      "filesName": {
                        "type": "string",
                        "description": "The name of the file on the system.",
                        "example": "190514"
                      },
                      "filesSize": {
                        "type": "string",
                        "description": "The size of the file in kilobytes.",
                        "example": "323"
                      },
                      "filesInventoryManagementId": {
                        "type": "string",
                        "description": "Unique identifier for this file.",
                        "example": "H000190514"
                      }
                    },
                    "description": "File Information."
                  },
                  "description": "The file information for a data element."
                }
              },
              "description": "Plan Design Data Element."
            },
            "description": "The data point presented for the section."
          }
        },
        "description": "Health Plan Design Data."
      },
      "personTasksResponse_inner": {
        "required": [
          "personTasksGroupTypeCode",
          "personTasksId",
          "personTasksStatus",
          "personTasksStatusDerivedByCode"
        ],
        "type": "object",
        "properties": {
          "personTasksId": {
            "type": "string",
            "description": "The unique identifier for the task.",
            "example": "54898"
          },
          "personTasksTypeCode": {
            "type": "string",
            "description": "The type code associated with the task. This helps identifiy supported tasks a participant may receive.\n  * `healthCareSpendingAccount`\n  * `dependentCareSpendingAccount`\n  * `existingPlanDefaultedToDifferentOption`\n  * `beneficiaryEnrollment`\n  * `primaryCareProviderElection`\n  * `healthRiskAssessment`\n  * `dependentDocumentationRequired`\n  * `eligibilityOfInsuranceForm`\n  * `healthSavingsAccountEnrollmentForm`\n  * `medicareAdvantageForm`\n  * `learnAboutYourBenefits`\n  * `planComparisonChartMedical`\n  * `planComparisonChartDental`\n  * `planComparisonChartVision`\n  * `medicalExpenseEstimator`\n  * `custom` - This can be a client defined custom value that does not fall into any other enumerated value. It is not limited to the string 'custom'.",
            "example": "healthCareSpendingAccount"
          },
          "personTasksGroupTypeCode": {
            "type": "string",
            "description": "Identifies the group this task is a part of.\n  * `toDo`\n  * `followUp`\n  * `enrollmentResource`\n",
            "example": "toDo"
          },
          "personTasksStatusDerivedByCode": {
            "type": "string",
            "description": "Defines how this task moves to a completed state.\n  * `system` - The system will provide a completed status when participant meets certain criteria.\n  * `user` - The user is allowed to complete this on their own by providing input to the tasks page.\n  * `systemAndUser` - Either the system will move it to completed when criteria is met or the user is allowed to mark the task as complete.\n",
            "example": "system"
          },
          "personTasksStatus": {
            "type": "string",
            "description": "The status the task is currently in.\n  * `outstanding` \n  * `completed` \n",
            "example": "outstanding"
          },
          "tasksText": {
            "type": "array",
            "items": {
              "required": [
                "tasksTextStatus"
              ],
              "type": "object",
              "properties": {
                "tasksTextStatus": {
                  "type": "string",
                  "description": "The status the text is associated with.\n  * `outstanding`\n  * `completed`\n",
                  "example": "outstanding"
                },
                "tasksTextAdditionalInfo": {
                  "type": "array",
                  "items": {
                    "required": [
                      "tasksTextAdditionalInfoId",
                      "tasksTextAdditionalInfoName",
                      "tasksTextAdditionalInfoSequence",
                      "tasksTextAdditionalInfoType",
                      "tasksTextAdditionalInfoValue"
                    ],
                    "type": "object",
                    "properties": {
                      "tasksTextAdditionalInfoId": {
                        "type": "string",
                        "description": "The unique identifier for the additional text.",
                        "example": "PLAN-DESC"
                      },
                      "tasksTextAdditionalInfoSequence": {
                        "type": "string",
                        "description": "The sequence of the additional text. This value can be used to replace text in the task.",
                        "example": "1"
                      },
                      "tasksTextAdditionalInfoName": {
                        "type": "string",
                        "description": "The name associated with the additional text.",
                        "example": "planDesc"
                      },
                      "tasksTextAdditionalInfoType": {
                        "type": "string",
                        "description": "The type of data found in the value.\n  * `date`\n  * `text`\n  * `percent`\n  * `float`\n",
                        "example": "text"
                      },
                      "tasksTextAdditionalInfoValue": {
                        "type": "string",
                        "description": "The value of with the additional text.",
                        "example": "Health Care Spending Account"
                      }
                    },
                    "description": "Additional text information for the task."
                  },
                  "description": "The additional text information for this task."
                },
                "tasksLink": {
                  "type": "array",
                  "items": {
                    "required": [
                      "tasksLinkName",
                      "tasksLinkType",
                      "tasksLinkValue"
                    ],
                    "type": "object",
                    "properties": {
                      "tasksLinkType": {
                        "type": "string",
                        "description": "The type of link being returned for this task.\n  * `primaryPlan`\n  * `singleSingOn`\n  * `titleLink`\n  * `thirdParty`\n",
                        "example": "primaryPlan"
                      },
                      "tasksLinkName": {
                        "type": "string",
                        "description": "The name associated with the link.",
                        "example": "Health Care Spending Account"
                      },
                      "tasksLinkValue": {
                        "type": "string",
                        "description": "The value associated with the link.",
                        "example": "HmEnrl040PlElecFSA"
                      }
                    },
                    "description": "Link information for the task."
                  },
                  "description": "The link information for this task."
                }
              },
              "description": "Text and Link information for the task."
            },
            "description": "The text information for this task."
          }
        },
        "description": "Person Tasks."
      },
      "updatePersonTasksRequest_inner": {
        "required": [
          "personTasksId",
          "personTasksStatus"
        ],
        "type": "object",
        "properties": {
          "personTasksId": {
            "type": "string",
            "description": "The unique identifier for the task.",
            "example": "54898"
          },
          "personTasksStatus": {
            "type": "string",
            "description": "The status the task is being updated to.\n  * `outstanding`\n  * `completed`\n",
            "example": "completed"
          }
        },
        "description": "Person Tasks."
      }
    }
  }
}